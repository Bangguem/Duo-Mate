{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  props: ['id'],\n  data() {\n    return {\n      update: null,\n      loading: true,\n      error: false,\n      isEditing: false,\n      editedTitle: '',\n      editedContent: '',\n      currentUser: null // ✅ 로그인 사용자 정보\n    };\n  },\n  computed: {\n    // ✅ Admin 여부 판단\n    isAdmin() {\n      return this.currentUser?.userid === 'Admin';\n    }\n  },\n  methods: {\n    async fetchUpdate() {\n      this.loading = true;\n      this.error = false;\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/updates/${this.id}`);\n        this.update = response.data;\n        this.editedTitle = response.data.title;\n        this.editedContent = response.data.content;\n      } catch (err) {\n        console.error('업데이트를 가져오는 중 오류:', err);\n        this.error = true;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async checkLogin() {\n      try {\n        const res = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          withCredentials: true\n        });\n        if (res.data.loggedIn) {\n          this.currentUser = res.data.user;\n        }\n      } catch (err) {\n        console.error('로그인 정보 확인 실패:', err);\n        this.currentUser = null;\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    },\n    convertNewLinesToBreaks(text) {\n      return text ? text.replace(/\\n/g, '<br>') : text;\n    },\n    enterEditMode() {\n      this.isEditing = true;\n    },\n    cancelEdit() {\n      this.isEditing = false;\n      this.editedTitle = this.update.title;\n      this.editedContent = this.update.content;\n    },\n    async updateUpdate() {\n      try {\n        const response = await axios.put(`${process.env.VUE_APP_API_URL}/api/updates/${this.id}`, {\n          title: this.editedTitle,\n          content: this.editedContent\n        }, {\n          withCredentials: true\n        });\n        this.update = response.data;\n        this.isEditing = false;\n        alert('업데이트가 수정되었습니다.');\n      } catch (err) {\n        console.error('업데이트 수정 중 오류:', err.response ? err.response.data : err);\n        alert('업데이트 수정에 실패했습니다.');\n      }\n    },\n    async deleteUpdate() {\n      if (confirm('정말 삭제하시겠습니까?')) {\n        try {\n          await axios.delete(`${process.env.VUE_APP_API_URL}/api/updates/${this.id}`, {\n            withCredentials: true\n          });\n          alert('업데이트가 삭제되었습니다.');\n          this.$router.push('/updates');\n        } catch (err) {\n          console.error('업데이트 삭제 중 오류:', err);\n          alert('업데이트 삭제에 실패했습니다.');\n        }\n      }\n    }\n  },\n  created() {\n    this.fetchUpdate();\n    this.checkLogin(); // ✅ 로그인 유저 정보 확인\n  }\n};","map":{"version":3,"names":["axios","props","data","update","loading","error","isEditing","editedTitle","editedContent","currentUser","computed","isAdmin","userid","methods","fetchUpdate","response","get","process","env","VUE_APP_API_URL","id","title","content","err","console","checkLogin","res","withCredentials","loggedIn","user","formatDate","date","Date","toLocaleDateString","convertNewLinesToBreaks","text","replace","enterEditMode","cancelEdit","updateUpdate","put","alert","deleteUpdate","confirm","delete","$router","push","created"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/components/UpdateDetail.vue"],"sourcesContent":["<template>\n  <div class=\"update-detail-container\">\n    <div v-if=\"loading\" class=\"loading\">\n      <h2>로딩 중...</h2>\n    </div>\n    <div v-else-if=\"error\" class=\"error\">\n      <h2>업데이트를 불러오지 못했습니다.</h2>\n    </div>\n    <div v-else class=\"update-detail-card\">\n      <!-- 수정 모드 -->\n      <div v-if=\"isEditing\">\n        <h2>업데이트 수정</h2>\n        <form @submit.prevent=\"updateUpdate\">\n          <input v-model=\"editedTitle\" type=\"text\" required class=\"input-field\" placeholder=\"제목 입력\" />\n          <textarea v-model=\"editedContent\" required class=\"textarea-field\" placeholder=\"내용 입력\"></textarea>\n          <div class=\"form-buttons\">\n            <button type=\"submit\" class=\"save-btn\">수정 완료</button>\n            <button type=\"button\" @click=\"cancelEdit\" class=\"cancel-btn\">취소</button>\n          </div>\n        </form>\n      </div>\n\n      <!-- 보기 모드 -->\n      <div v-else>\n        <div class=\"update-header\">\n          <h1>{{ update.title }}</h1>\n          <div class=\"update-meta\">\n            <span>작성일: {{ formatDate(update.date) }}</span>\n          </div>\n        </div>\n        <p class=\"update-content\" v-html=\"convertNewLinesToBreaks(update.content)\"></p>\n\n        <!-- ✅ Admin만 수정/삭제 버튼 표시 -->\n        <div v-if=\"isAdmin\" class=\"action-buttons\">\n          <button @click=\"enterEditMode\" class=\"edit-btn\">✏️ 수정</button>\n          <button @click=\"deleteUpdate\" class=\"delete-btn\">🗑 삭제</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: ['id'],\n  data() {\n    return {\n      update: null,\n      loading: true,\n      error: false,\n      isEditing: false,\n      editedTitle: '',\n      editedContent: '',\n      currentUser: null // ✅ 로그인 사용자 정보\n    };\n  },\n  computed: {\n    // ✅ Admin 여부 판단\n    isAdmin() {\n      return this.currentUser?.userid === 'Admin';\n    }\n  },\n  methods: {\n    async fetchUpdate() {\n      this.loading = true;\n      this.error = false;\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/updates/${this.id}`);\n        this.update = response.data;\n        this.editedTitle = response.data.title;\n        this.editedContent = response.data.content;\n      } catch (err) {\n        console.error('업데이트를 가져오는 중 오류:', err);\n        this.error = true;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async checkLogin() {\n      try {\n        const res = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          withCredentials: true\n        });\n        if (res.data.loggedIn) {\n          this.currentUser = res.data.user;\n        }\n      } catch (err) {\n        console.error('로그인 정보 확인 실패:', err);\n        this.currentUser = null;\n      }\n    },\n\n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    },\n\n    convertNewLinesToBreaks(text) {\n      return text ? text.replace(/\\n/g, '<br>') : text;\n    },\n\n    enterEditMode() {\n      this.isEditing = true;\n    },\n\n    cancelEdit() {\n      this.isEditing = false;\n      this.editedTitle = this.update.title;\n      this.editedContent = this.update.content;\n    },\n\n    async updateUpdate() {\n      try {\n        const response = await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/updates/${this.id}`,\n          {\n            title: this.editedTitle,\n            content: this.editedContent\n          },\n          { withCredentials: true }\n        );\n        this.update = response.data;\n        this.isEditing = false;\n        alert('업데이트가 수정되었습니다.');\n      } catch (err) {\n        console.error('업데이트 수정 중 오류:', err.response ? err.response.data : err);\n        alert('업데이트 수정에 실패했습니다.');\n      }\n    },\n\n    async deleteUpdate() {\n      if (confirm('정말 삭제하시겠습니까?')) {\n        try {\n          await axios.delete(`${process.env.VUE_APP_API_URL}/api/updates/${this.id}`, {\n            withCredentials: true\n          });\n          alert('업데이트가 삭제되었습니다.');\n          this.$router.push('/updates');\n        } catch (err) {\n          console.error('업데이트 삭제 중 오류:', err);\n          alert('업데이트 삭제에 실패했습니다.');\n        }\n      }\n    }\n  },\n  created() {\n    this.fetchUpdate();\n    this.checkLogin(); // ✅ 로그인 유저 정보 확인\n  }\n};\n</script>\n\n<style scoped>\n.update-detail-container {\n  max-width: 700px;\n  margin: 40px auto;\n  padding: 20px;\n  background: #222;\n  border-radius: 8px;\n  color: white;\n}\n\n.loading,\n.error {\n  text-align: center;\n}\n\n.update-detail-card {\n  background: #333;\n  padding: 20px;\n  border-radius: 10px;\n  position: relative;\n}\n\n.update-header h1 {\n  margin: 0;\n}\n\n.update-meta {\n  font-size: 14px;\n  color: #bbb;\n  margin-bottom: 10px;\n}\n\n.update-content {\n  font-size: 16px;\n  line-height: 1.6;\n  margin-bottom: 20px;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 10px;\n}\n\n.edit-btn,\n.delete-btn {\n  padding: 8px 12px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.edit-btn {\n  background-color: #42b983;\n  color: white;\n}\n\n.delete-btn {\n  background-color: #d9534f;\n  color: white;\n}\n\n.form-buttons {\n  display: flex;\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.save-btn,\n.cancel-btn {\n  padding: 8px 12px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.save-btn {\n  background-color: #42b983;\n  color: white;\n}\n\n.cancel-btn {\n  background-color: gray;\n  color: white;\n}\n\n.input-field,\n.textarea-field {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #bbb;\n  border-radius: 5px;\n  background: #222;\n  color: white;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}