{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, withKeys as _withKeys, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"contents\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"contents-header\"\n};\nconst _hoisted_3 = {\n  class: \"header-left\"\n};\nconst _hoisted_4 = {\n  class: \"select-wrapper\"\n};\nconst _hoisted_5 = {\n  class: \"select-wrapper\"\n};\nconst _hoisted_6 = {\n  class: \"header-right\"\n};\nconst _hoisted_7 = {\n  class: \"search-box\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"write-button-container\"\n};\nconst _hoisted_9 = {\n  key: 2,\n  class: \"feed-container\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"loading\"\n};\nconst _hoisted_11 = {\n  key: 1,\n  class: \"error\"\n};\nconst _hoisted_12 = {\n  key: 2,\n  class: \"feed-list\"\n};\nconst _hoisted_13 = {\n  class: \"feed-header\"\n};\nconst _hoisted_14 = [\"onClick\"];\nconst _hoisted_15 = [\"innerHTML\"];\nconst _hoisted_16 = {\n  key: 0,\n  class: \"feed-image\"\n};\nconst _hoisted_17 = [\"src\"];\nconst _hoisted_18 = {\n  class: \"feed-actions\"\n};\nconst _hoisted_19 = {\n  style: {\n    \"margin-left\": \"10px\"\n  }\n};\nconst _hoisted_20 = {\n  class: \"view-count\",\n  style: {\n    \"margin-left\": \"10px\"\n  }\n};\nconst _hoisted_21 = {\n  key: 3,\n  class: \"no-posts\"\n};\nconst _hoisted_22 = {\n  key: 3,\n  class: \"post-form\"\n};\nconst _hoisted_23 = {\n  class: \"post-buttons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" [1] 게시글 목록(검색/정렬/작성 버튼 포함) 영역 \"), $data.currentPage === 'board' ? (_openBlock(), _createElementBlock(\"section\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" 정렬 방식 선택 \"), _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"select\", {\n    id: \"sort\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.sortOrder = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => _ctx.sortPosts && _ctx.sortPosts(...args)),\n    class: \"filter-dropdown\"\n  }, _cache[13] || (_cache[13] = [_createElementVNode(\"option\", {\n    value: \"latest\"\n  }, \"최신순\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"oldest\"\n  }, \"오래된순\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"likes\"\n  }, \"좋아요순\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"views\"\n  }, \"조회수순\", -1 /* HOISTED */)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.sortOrder]])]), _createCommentVNode(\" 검색 조건 선택 \"), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.searchType = $event),\n    class: \"filter-dropdown\"\n  }, _cache[14] || (_cache[14] = [_createElementVNode(\"option\", {\n    value: \"title\"\n  }, \"제목\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"content\"\n  }, \"내용\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"author\"\n  }, \"등록자명\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.searchType]])]), _createCommentVNode(\" 검색 초기화 버튼 \"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.resetSearch && $options.resetSearch(...args)),\n    class: \"reset-button\"\n  }, \"초기화\")]), _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" 검색 박스 \"), _createElementVNode(\"div\", _hoisted_7, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.searchQuery = $event),\n    onKeyup: _cache[5] || (_cache[5] = _withKeys((...args) => $options.filterPosts && $options.filterPosts(...args), [\"enter\"])),\n    type: \"text\",\n    placeholder: \"검색어를 입력하세요\",\n    class: \"search-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createElementVNode(\"span\", {\n    class: \"search-icon\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.filterPosts && $options.filterPosts(...args))\n  }, \"🔍\")])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 게시글 작성 이동 버튼 \"), $data.currentPage === 'board' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.goToWritePage && $options.goToWritePage(...args)),\n    class: \"write-button\"\n  }, \"게시글 작성\")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 게시글 목록 \"), $data.currentPage === 'board' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createCommentVNode(\" 로딩/에러/게시글 목록 상태 표시 \"), $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, \"로딩 중...\")) : $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, \"게시글을 불러오는 데 실패했습니다.\")) : $options.sortedPosts.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.sortedPosts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post._id,\n      class: \"feed-card\"\n    }, [_createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"strong\", null, _toDisplayString(post.author || '작성자 없음'), 1 /* TEXT */), _createElementVNode(\"div\", null, _toDisplayString($options.formatDate(post.createdAt)), 1 /* TEXT */)]), _createElementVNode(\"h2\", {\n      class: \"feed-title\",\n      onClick: $event => $options.goToDetailPage(post._id)\n    }, _toDisplayString(post.title), 9 /* TEXT, PROPS */, _hoisted_14), _createElementVNode(\"p\", {\n      class: \"feed-content\",\n      innerHTML: $options.convertNewLinesToBreaks(post.content)\n    }, null, 8 /* PROPS */, _hoisted_15), post.imageUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_createElementVNode(\"img\", {\n      src: `http://localhost:3000${post.imageUrl}`,\n      alt: \"게시글 이미지\"\n    }, null, 8 /* PROPS */, _hoisted_17)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"span\", null, \"👍 \" + _toDisplayString(post.likes || 0), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_19, \"👎 \" + _toDisplayString(post.dislikes || 0), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_20, \"조회수: \" + _toDisplayString(post.views || 0), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_21, \"게시글이 없습니다.\"))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 게시글 작성 폼 \"), $data.currentPage === 'write' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_cache[16] || (_cache[16] = _createElementVNode(\"h2\", {\n    class: \"post-title\"\n  }, \"게시글 작성\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[12] || (_cache[12] = _withModifiers((...args) => $options.submitPost && $options.submitPost(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $data.title = $event),\n    type: \"text\",\n    placeholder: \"제목을 입력하세요\",\n    class: \"post-input\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.title]]), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $data.content = $event),\n    placeholder: \"내용을 입력하세요\",\n    class: \"post-textarea\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.content]]), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[10] || (_cache[10] = (...args) => $options.handleImageUpload && $options.handleImageUpload(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"div\", _hoisted_23, [_cache[15] || (_cache[15] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"post-submit\"\n  }, \"게시글 작성\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: _cache[11] || (_cache[11] = (...args) => $options.goToBoardPage && $options.goToBoardPage(...args)),\n    class: \"post-cancel\"\n  }, \"취소\")])], 32 /* NEED_HYDRATION */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","style","_createElementBlock","_hoisted_1","_createCommentVNode","$data","currentPage","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","id","_cache","$event","sortOrder","onChange","args","_ctx","sortPosts","value","_hoisted_5","searchType","onClick","$options","resetSearch","_hoisted_6","_hoisted_7","searchQuery","onKeyup","_withKeys","filterPosts","type","placeholder","_hoisted_8","goToWritePage","_hoisted_9","loading","_hoisted_10","error","_hoisted_11","sortedPosts","length","_hoisted_12","_Fragment","_renderList","post","_id","_hoisted_13","_toDisplayString","author","formatDate","createdAt","goToDetailPage","title","_hoisted_14","innerHTML","convertNewLinesToBreaks","content","_hoisted_15","imageUrl","_hoisted_16","src","alt","_hoisted_17","_hoisted_18","likes","_hoisted_19","dislikes","_hoisted_20","views","_hoisted_21","_hoisted_22","onSubmit","_withModifiers","submitPost","required","handleImageUpload","accept","_hoisted_23","goToBoardPage"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/components/BoardForm.vue"],"sourcesContent":["<template>\n  <div class=\"contents\">\n    <!-- [1] 게시글 목록(검색/정렬/작성 버튼 포함) 영역 -->\n    <section class=\"contents-header\" v-if=\"currentPage === 'board'\">\n      <div class=\"header-left\">\n        <!-- 정렬 방식 선택 -->\n        <div class=\"select-wrapper\">\n          <select id=\"sort\" v-model=\"sortOrder\" @change=\"sortPosts\" class=\"filter-dropdown\">\n            <option value=\"latest\">최신순</option>\n            <option value=\"oldest\">오래된순</option>\n            <option value=\"likes\">좋아요순</option>\n            <option value=\"views\">조회수순</option>\n          </select>\n        </div>\n\n        <!-- 검색 조건 선택 -->\n        <div class=\"select-wrapper\">\n          <select v-model=\"searchType\" class=\"filter-dropdown\">\n            <option value=\"title\">제목</option>\n            <option value=\"content\">내용</option>\n            <option value=\"author\">등록자명</option>\n          </select>\n        </div>\n\n        <!-- 검색 초기화 버튼 -->\n        <button @click=\"resetSearch\" class=\"reset-button\">초기화</button>\n      </div>\n\n      <div class=\"header-right\">\n        <!-- 검색 박스 -->\n        <div class=\"search-box\">\n          <input v-model=\"searchQuery\" @keyup.enter=\"filterPosts\" type=\"text\" placeholder=\"검색어를 입력하세요\"\n            class=\"search-input\" />\n          <span class=\"search-icon\" @click=\"filterPosts\">🔍</span>\n        </div>\n      </div>\n    </section>\n\n    <!-- 게시글 작성 이동 버튼 -->\n    <div class=\"write-button-container\" v-if=\"currentPage === 'board'\">\n      <button @click=\"goToWritePage\" class=\"write-button\">게시글 작성</button>\n    </div>\n\n    <!-- 게시글 목록 -->\n    <div v-if=\"currentPage === 'board'\" class=\"feed-container\">\n      <!-- 로딩/에러/게시글 목록 상태 표시 -->\n      <div v-if=\"loading\" class=\"loading\">로딩 중...</div>\n      <div v-else-if=\"error\" class=\"error\">게시글을 불러오는 데 실패했습니다.</div>\n\n      <div v-else-if=\"sortedPosts.length\" class=\"feed-list\">\n        <div v-for=\"post in sortedPosts\" :key=\"post._id\" class=\"feed-card\">\n          <div class=\"feed-header\">\n            <strong>{{ post.author || '작성자 없음' }}</strong>\n            <div>{{ formatDate(post.createdAt) }}</div>\n          </div>\n          <h2 class=\"feed-title\" @click=\"goToDetailPage(post._id)\">{{ post.title }}</h2>\n          <p class=\"feed-content\" v-html=\"convertNewLinesToBreaks(post.content)\"></p>\n\n          <div v-if=\"post.imageUrl\" class=\"feed-image\">\n            <img :src=\"`http://localhost:3000${post.imageUrl}`\" alt=\"게시글 이미지\" />\n          </div>\n\n          <div class=\"feed-actions\">\n            <span>👍 {{ post.likes || 0 }}</span>\n            <span style=\"margin-left: 10px;\">👎 {{ post.dislikes || 0 }}</span>\n            <span class=\"view-count\" style=\"margin-left: 10px;\">조회수: {{ post.views || 0 }}</span>\n          </div>\n        </div>\n      </div>\n\n      <div v-else class=\"no-posts\">게시글이 없습니다.</div>\n    </div>\n\n    <!-- 게시글 작성 폼 -->\n    <div v-if=\"currentPage === 'write'\" class=\"post-form\">\n      <h2 class=\"post-title\">게시글 작성</h2>\n      <form @submit.prevent=\"submitPost\">\n        <input v-model=\"title\" type=\"text\" placeholder=\"제목을 입력하세요\" class=\"post-input\" required />\n\n        <textarea v-model=\"content\" placeholder=\"내용을 입력하세요\" class=\"post-textarea\" required></textarea>\n\n        <input type=\"file\" @change=\"handleImageUpload\" accept=\"image/*\" />\n\n        <div class=\"post-buttons\">\n          <button type=\"submit\" class=\"post-submit\">게시글 작성</button>\n          <button type=\"button\" @click=\"goToBoardPage\" class=\"post-cancel\">취소</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      posts: [],          // 게시글 목록\n      filteredPosts: [],  // 필터링된 게시글 목록\n      loading: true,      // 로딩 상태\n      error: false,       // 오류 상태\n      title: '',          // 게시글 제목\n      content: '',        // 게시글 내용\n      currentPage: 'board',   // 현재 페이지 상태 ('board', 'write')\n      currentUser: null,      // 현재 로그인한 사용자 정보\n      sortOrder: 'latest',    // 정렬 기준\n      searchQuery: '',        // 검색어\n      searchType: 'title',    // 검색 항목 (제목, 내용, 등록자명)\n      image: null, // 추가\n    };\n  },\n  computed: {\n    // 검색된 게시글 목록을 기준으로 정렬된 게시글을 반환\n    sortedPosts() {\n      return [...this.filteredPosts].sort((a, b) => {\n        if (this.sortOrder === 'latest') {\n          return new Date(b.createdAt) - new Date(a.createdAt); // 최신순\n        } else if (this.sortOrder === 'oldest') {\n          return new Date(a.createdAt) - new Date(b.createdAt); // 오래된순\n        } else if (this.sortOrder === 'likes') {\n          return (b.likes || 0) - (a.likes || 0);               // 좋아요순\n        } else if (this.sortOrder === 'views') {\n          return (b.views || 0) - (a.views || 0);               // 조회수순\n        }\n      });\n    }\n  },\n  created() {\n    this.initData();        // 초기 데이터 로드\n    this.checkLoginStatus(); // 로그인 상태 확인\n  },\n  methods: {\n    handleImageUpload(event) {\n      this.image = event.target.files[0];\n    },\n\n    // 로그인 상태 확인\n    async checkLoginStatus() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          withCredentials: true\n        });\n        this.currentUser = response.data.user || null; // 로그인 사용자 정보\n      } catch (error) {\n        console.error('로그인 상태 확인 중 오류 발생:', error);\n        this.currentUser = null; // 로그아웃 상태\n      }\n    },\n\n    // 초기 데이터 로드\n    async initData() {\n      this.loading = true;\n      this.error = false;\n      try {\n        await this.fetchPosts();\n      } catch (error) {\n        console.error('초기 데이터를 가져오는 중 오류 발생:', error);\n        this.error = true;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // 게시글 목록 가져오기\n    async fetchPosts() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board`, {\n          withCredentials: true\n        });\n        this.posts = response.data;\n        this.filteredPosts = [...this.posts];\n      } catch (error) {\n        console.error('게시글을 가져오는 중 오류 발생:', error);\n        this.error = true;\n      }\n    },\n\n    // 게시글 검색\n    filterPosts() {\n      if (this.searchQuery.trim()) {\n        // 제목 검색\n        if (this.searchType === 'title') {\n          this.filteredPosts = this.posts.filter(post =>\n            post.title.toLowerCase().includes(this.searchQuery.toLowerCase())\n          );\n        }\n        // 내용 검색\n        else if (this.searchType === 'content') {\n          this.filteredPosts = this.posts.filter(post =>\n            post.content.toLowerCase().includes(this.searchQuery.toLowerCase())\n          );\n        }\n        // 등록자명 검색\n        else if (this.searchType === 'author') {\n          this.filteredPosts = this.posts.filter(post =>\n            (post.author || '').toLowerCase().includes(this.searchQuery.toLowerCase())\n          );\n        }\n      } else {\n        this.filteredPosts = [...this.posts]; // 검색어 없으면 원본 전체\n      }\n    },\n\n    // 게시글 작성\n    async submitPost() {\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n\n      try {\n        await axios.post(`${process.env.VUE_APP_API_URL}/api/board`, formData, {\n          withCredentials: true,\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        this.goToBoardPage();\n        this.initData();\n      } catch (error) {\n        console.error('게시글 작성 중 오류 발생:', error);\n      }\n    },\n\n    // 페이지 이동\n    goToBoardPage() {\n      this.currentPage = 'board';\n      this.title = '';\n      this.content = '';\n    },\n    goToWritePage() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      this.currentPage = 'write';\n    },\n    goToDetailPage(postId) {\n      this.$router.push({ name: 'BoardDetail', params: { id: postId } });\n    },\n\n    // 날짜 형식 변경\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString(undefined, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n\n    // 검색 초기화\n    resetSearch() {\n      this.searchQuery = '';\n      this.filteredPosts = [...this.posts];\n    },\n\n    // 개행 문자 -> <br> 변환\n    convertNewLinesToBreaks(text) {\n      return text.replace(/\\n/g, '<br>');\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 메인 컨테이너 */\n.contents {\n  width: 100%;\n  max-width: 1260px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px 50px;\n  border-radius: 0.5rem;\n}\n\n/* 상단 검색/필터 영역 */\n.contents-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #424242;\n  padding: 15px;\n  border-radius: 10px;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.header-right {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.filter-dropdown {\n  background-color: #333;\n  color: white;\n  padding: 8px 32px 8px 12px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  position: relative;\n  outline: none;\n}\n\n.select-wrapper {\n  position: relative;\n  display: inline-block;\n}\n\n.select-wrapper::after {\n  content: '▼';\n  color: gray;\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  pointer-events: none;\n}\n\n/* 검색 초기화 버튼 */\n.reset-button {\n  color: #42b983;\n  background: none;\n  padding: 8px 8px;\n  border: none;\n  border-radius: 1.5rem;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.2s, color 0.2s;\n}\n\n@media (hover: hover) {\n  .reset-button:hover {\n    background-color: hsla(160, 100%, 37%, 0.2);\n  }\n}\n\n/* 검색 박스 */\n.search-box {\n  display: flex;\n  align-items: center;\n  background-color: black;\n  border-radius: 20px;\n  padding: 5px 10px;\n}\n\n.search-input {\n  background: none;\n  border: none;\n  color: white;\n  outline: none;\n}\n\n.search-icon {\n  color: gray;\n  cursor: pointer;\n}\n\n/* 게시글 작성 버튼 컨테이너 */\n.write-button-container {\n  display: flex;\n  justify-content: center;\n  position: relative;\n}\n\n.write-button {\n  width: 100px;\n  height: 30px;\n  border-radius: 20px;\n  background-color: transparent;\n  color: white;\n  border: 1px solid #42b983;\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 13px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.3s, transform 0.2s;\n}\n\n.write-button:hover {\n  background-color: #36a372;\n  transform: scale(1.1);\n}\n\n/* 게시글 목록 */\n.feed-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n}\n\n.feed-list {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 600px;\n  gap: 30px;\n}\n\n.feed-card {\n  background: #333;\n  border-radius: 12px;\n  padding: 15px;\n  color: white;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  transition: transform 0.2s;\n}\n\n.feed-card:hover {\n  transform: translateY(-3px);\n}\n\n.feed-header {\n  font-size: 12px;\n  color: gray;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.feed-title {\n  font-size: 18px;\n  font-weight: bold;\n  cursor: pointer;\n  margin: 0;\n}\n\n.feed-content {\n  font-size: 14px;\n  color: lightgray;\n  margin: 0;\n}\n\n.feed-actions {\n  display: flex;\n  align-items: center;\n  padding-top: 10px;\n  gap: 10px;\n}\n\n.view-count {\n  font-size: 12px;\n  color: lightgray;\n}\n\n/* 게시글 작성 폼 */\n.post-form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #333;\n  padding: 20px;\n  border-radius: 12px;\n  max-width: 500px;\n  width: 100%;\n  margin: 0 auto;\n}\n\n.post-title {\n  font-size: 20px;\n  color: white;\n}\n\n.post-input,\n.post-textarea {\n  width: 100%;\n  padding: 10px;\n  margin: 10px 0;\n  border-radius: 8px;\n  border: none;\n  background: #222;\n  color: white;\n  font-size: 14px;\n}\n\n.post-textarea {\n  min-height: 100px;\n}\n\n.post-buttons {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.post-submit,\n.post-cancel {\n  padding: 10px;\n  border-radius: 8px;\n  color: white;\n  cursor: pointer;\n  border: none;\n}\n\n.post-submit {\n  background-color: #42b983;\n}\n\n.post-cancel {\n  background-color: gray;\n}\n\n/* 에러 표시 */\n.error {\n  color: red;\n}\n\n/* 공통 버튼 여백 */\nbutton {\n  margin: 5px;\n}\n\n.feed-image {\n  position: relative;\n  width: 100%;\n  padding-top: 56.25%;\n  /* 16:9 비율을 유지 (9/16 * 100%) */\n  overflow: hidden;\n  border-radius: 8px;\n}\n\n.feed-image img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  /* 이미지 비율을 유지하며 전체 영역 채움 */\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}