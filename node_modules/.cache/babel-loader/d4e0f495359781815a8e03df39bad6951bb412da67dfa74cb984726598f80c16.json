{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport SignupForm from '../components/SignupForm.vue';\nimport LoginForm from '@/components/LoginForm.vue';\nimport RequestPasswordReset from '@/components/RequestPasswordReset.vue';\nimport ResetPassword from '@/components/ResetPassword.vue';\nimport FindPassword from '@/components/FindPassword.vue';\nimport FindId from '@/components/FindId.vue';\nimport MypageEdit from '@/components/MypageEdit.vue';\nimport BoardForm from '@/components/BoardForm.vue'; // BoardForm 컴포넌트 불러오기\nimport BoardDetail from '@/components/BoardDetail.vue'; //BoardDetail 컴포넌트 불러오기\nimport patchNotesDisplay from '@/components/patchNotesDisplay.vue'; // 새 컴포넌트 추가\nimport MatchQueue from '@/components/MatchQueue.vue';\nimport ChatRoom from '@/components/ChatRoom.vue';\nimport axios from 'axios';\nimport NoticePage from '../components/NoticePage.vue'; // 공지사항 페이지 컴포넌트\nimport UpdatePage from '@/components/UpdatePage.vue'; // 업데이트 페이지 추가\nimport UpdateDetail from '@/components/UpdateDetail.vue'; // 상세 페이지 컴포넌트\nimport InquiryForm from '@/components/InquiryForm.vue';\nimport InquiryList from '@/components/InquiryList.vue';\nimport InquiryDetail from '@/components/InquiryDetail.vue';\nconst routes = [{\n  path: '/signup',\n  name: 'Signup',\n  component: SignupForm\n}, {\n  path: '/login',\n  name: 'Login',\n  component: LoginForm\n}, {\n  path: '/request-password-reset',\n  component: RequestPasswordReset\n}, {\n  path: '/reset-password',\n  component: ResetPassword\n}, {\n  path: '/find-password',\n  component: FindPassword\n}, {\n  path: '/find-id',\n  component: FindId\n}, {\n  path: '/mypage-edit',\n  component: MypageEdit,\n  meta: {\n    requiresAuth: true\n  } /* 비로그인 상태일 때 로그인 페이지로 이동 */\n}, {\n  path: '/board',\n  name: 'BoardForm',\n  component: BoardForm // 게시판 페이지 추가\n}, {\n  path: '/board/:id',\n  name: 'BoardDetail',\n  component: BoardDetail,\n  props: true // 게시글 ID를 컴포넌트에 전달\n}, {\n  path: '/matchqueue',\n  component: MatchQueue\n}, {\n  path: '/chatroom',\n  name: 'ChatRoom',\n  component: ChatRoom,\n  props: true // params를 컴포넌트 props로 전달\n}, {\n  path: '/patch-notes',\n  name: 'PatchNotesDisplay',\n  component: patchNotesDisplay // 새로운 컴포넌트 등록\n}, {\n  path: '/notices',\n  name: 'Notices',\n  component: NoticePage // 공지사항 페이지 컴포넌트\n}, {\n  path: '/updates',\n  // 업데이트 페이지 라우트 추가\n  name: 'UpdatePage',\n  component: UpdatePage\n},\n// 업데이트 상세 페이지\n{\n  path: '/updates/:id',\n  name: 'UpdateDetail',\n  component: UpdateDetail,\n  props: true\n}, {\n  path: '/inquiries',\n  name: 'InquiryList',\n  component: InquiryList,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/inquiries/new',\n  name: 'InquiryForm',\n  component: InquiryForm,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/inquiries/:id',\n  name: 'InquiryDetail',\n  component: InquiryDetail,\n  props: true,\n  meta: {\n    requiresAuth: true\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\nasync function isLoggedIn() {\n  try {\n    const response = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n      withCredentials: true // 쿠키 포함 요청\n    });\n    return response.data.loggedIn;\n  } catch (error) {\n    console.error('Error checking login status:', error);\n    return false; // 오류 발생 시 비로그인 상태로 간주\n  }\n}\n\n// Navigation Guard 설정\nrouter.beforeEach(async (to, from, next) => {\n  const requiresAuth = to.meta.requiresAuth;\n  if (requiresAuth) {\n    // 인증이 필요한 페이지 접근 시 로그인 상태 확인\n    const loggedIn = await isLoggedIn();\n    if (!loggedIn) {\n      // 로그인 상태가 아니면 로그인 페이지로 이동\n      return next({\n        name: 'Login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n    }\n  }\n  next(); // 인증이 필요하지 않거나 로그인 상태라면 다음 라우트로 이동\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","SignupForm","LoginForm","RequestPasswordReset","ResetPassword","FindPassword","FindId","MypageEdit","BoardForm","BoardDetail","patchNotesDisplay","MatchQueue","ChatRoom","axios","NoticePage","UpdatePage","UpdateDetail","InquiryForm","InquiryList","InquiryDetail","routes","path","name","component","meta","requiresAuth","props","router","history","isLoggedIn","response","get","process","env","VUE_APP_API_URL","withCredentials","data","loggedIn","error","console","beforeEach","to","from","next","query","redirect","fullPath"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport SignupForm from '../components/SignupForm.vue';\nimport LoginForm from '@/components/LoginForm.vue';\nimport RequestPasswordReset from '@/components/RequestPasswordReset.vue';\nimport ResetPassword from '@/components/ResetPassword.vue';\nimport FindPassword from '@/components/FindPassword.vue';\nimport FindId from '@/components/FindId.vue';\nimport MypageEdit from '@/components/MypageEdit.vue';\nimport BoardForm from '@/components/BoardForm.vue'; // BoardForm 컴포넌트 불러오기\nimport BoardDetail from '@/components/BoardDetail.vue'; //BoardDetail 컴포넌트 불러오기\nimport patchNotesDisplay from '@/components/patchNotesDisplay.vue'; // 새 컴포넌트 추가\nimport MatchQueue from '@/components/MatchQueue.vue';\nimport ChatRoom from '@/components/ChatRoom.vue';\nimport axios from 'axios';\nimport NoticePage from '../components/NoticePage.vue'; // 공지사항 페이지 컴포넌트\nimport UpdatePage from '@/components/UpdatePage.vue'; // 업데이트 페이지 추가\nimport UpdateDetail from '@/components/UpdateDetail.vue'; // 상세 페이지 컴포넌트\nimport InquiryForm from '@/components/InquiryForm.vue';\nimport InquiryList from '@/components/InquiryList.vue';\nimport InquiryDetail from '@/components/InquiryDetail.vue';\n\nconst routes = [\n  {\n    path: '/signup',\n    name: 'Signup',\n    component: SignupForm,\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: LoginForm,\n  },\n  { path: '/request-password-reset', component: RequestPasswordReset },\n  { path: '/reset-password', component: ResetPassword },\n  { path: '/find-password', component: FindPassword },\n  { path: '/find-id', component: FindId },\n  { path: '/mypage-edit', component: MypageEdit, meta: { requiresAuth: true } /* 비로그인 상태일 때 로그인 페이지로 이동 */ },\n  {\n    path: '/board',\n    name: 'BoardForm',\n    component: BoardForm, // 게시판 페이지 추가\n  },\n  {\n    path: '/board/:id',\n    name: 'BoardDetail',\n    component: BoardDetail,\n    props: true, // 게시글 ID를 컴포넌트에 전달\n  },\n  { path: '/matchqueue', component: MatchQueue },\n  {\n    path: '/chatroom',\n    name: 'ChatRoom',\n    component: ChatRoom,\n    props: true, // params를 컴포넌트 props로 전달\n  },\n  {\n    path: '/patch-notes',\n    name: 'PatchNotesDisplay',\n    component: patchNotesDisplay,  // 새로운 컴포넌트 등록\n  },\n  {\n    path: '/notices',\n    name: 'Notices',\n    component: NoticePage, // 공지사항 페이지 컴포넌트\n  },\n  {\n    path: '/updates', // 업데이트 페이지 라우트 추가\n    name: 'UpdatePage',\n    component: UpdatePage,\n  },\n   // 업데이트 상세 페이지\n  {\n      path: '/updates/:id',\n      name: 'UpdateDetail',\n      component: UpdateDetail,\n      props: true,\n  },\n  {\n    path: '/inquiries',\n    name: 'InquiryList',\n    component: InquiryList,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: '/inquiries/new',\n    name: 'InquiryForm',\n    component: InquiryForm,\n    meta: { requiresAuth: true },\n  },\n  {\n    path: '/inquiries/:id',\n    name: 'InquiryDetail',\n    component: InquiryDetail,\n    props: true,\n    meta: { requiresAuth: true },\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n});\n\nasync function isLoggedIn() {\n  try {\n    const response = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n      withCredentials: true, // 쿠키 포함 요청\n    });\n    return response.data.loggedIn;\n  } catch (error) {\n    console.error('Error checking login status:', error);\n    return false; // 오류 발생 시 비로그인 상태로 간주\n  }\n}\n\n// Navigation Guard 설정\nrouter.beforeEach(async (to, from, next) => {\n  const requiresAuth = to.meta.requiresAuth;\n\n  if (requiresAuth) {\n    // 인증이 필요한 페이지 접근 시 로그인 상태 확인\n    const loggedIn = await isLoggedIn();\n\n    if (!loggedIn) {\n      // 로그인 상태가 아니면 로그인 페이지로 이동\n      return next({ name: 'Login', query: { redirect: to.fullPath } });\n    }\n  }\n\n  next(); // 인증이 필요하지 않거나 로그인 상태라면 다음 라우트로 이동\n});\n\nexport default router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}