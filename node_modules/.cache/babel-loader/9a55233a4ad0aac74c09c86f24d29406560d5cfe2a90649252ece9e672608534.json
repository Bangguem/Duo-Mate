{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { io } from \"socket.io-client\";\nexport default {\n  data() {\n    return {\n      socket: null,\n      isLoggedIn: false,\n      userInfo: {},\n      selectedPositions: [],\n      microphone: \"미사용\",\n      matchType: \"일반\",\n      isMatching: false,\n      matchFound: false,\n      matchId: null,\n      opponentAccepted: false,\n      // 🔹 상대방 수락 여부\n      waitingForOpponent: false,\n      // 🔹 상대 응답 대기 상태\n      waitingTime: 0,\n      timer: null,\n      // 15초 카운트 다운 관련 변수 추가\n      countdown: 15,\n      countdownTimer: null,\n      positionIconSize: 40,\n      voiceIconWidth: 50,\n      voiceIconHeight: 80,\n      gameModeIconSize: 120,\n      positions: [{\n        label: \"탑\",\n        value: \"탑\",\n        icon: \"/icons/top.png\"\n      }, {\n        label: \"정글\",\n        value: \"정글\",\n        icon: \"/icons/jungle.png\"\n      }, {\n        label: \"미드\",\n        value: \"미드\",\n        icon: \"/icons/mid.png\"\n      }, {\n        label: \"원딜\",\n        value: \"원딜\",\n        icon: \"/icons/adc.png\"\n      }, {\n        label: \"서포터\",\n        value: \"서포터\",\n        icon: \"/icons/support.png\"\n      }, {\n        label: \"없음\",\n        value: \"없음\",\n        icon: \"/icons/none.png\"\n      }],\n      voiceOptions: [{\n        label: \"사용\",\n        value: \"사용\",\n        icon: \"/icons/mic-on.png\"\n      }, {\n        label: \"미사용\",\n        value: \"미사용\",\n        icon: \"/icons/mic-off.png\"\n      }],\n      gameModes: [{\n        label: \"일반\",\n        value: \"일반\",\n        icon: \"/icons/normal.png\"\n      }, {\n        label: \"랭크\",\n        value: \"랭크\",\n        icon: \"/icons/rank.png\"\n      }]\n    };\n  },\n  async mounted() {\n    await this.checkLoginStatus(); // 로그인 상태 확인\n    this.initializeSocket();\n  },\n  methods: {\n    async fetchLatestMatchData() {\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/updateSummonerInfo`, {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const result = await response.json();\n        if (result.success) {\n          alert(\"소환사 정보 갱신 성공\");\n          await this.checkLoginStatus();\n        } else {\n          alert(\"소환사 정보 갱신 실패: \" + result.message);\n        }\n      } catch (error) {\n        console.error(\"소환사 정보 갱신 오류:\", error);\n        alert(\"소환사 정보 갱신 중 오류 발생\");\n      }\n    },\n    async checkLoginStatus() {\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (response.ok) {\n          const data = await response.json();\n          this.isLoggedIn = data.loggedIn;\n          if (data.loggedIn) {\n            this.userInfo = data.user || {};\n          } else {\n            this.handleUnauthenticatedUser();\n          }\n        } else {\n          this.handleUnauthenticatedUser();\n        }\n      } catch (error) {\n        console.error(\"❌ 로그인 상태 확인 오류:\", error);\n        this.handleUnauthenticatedUser();\n      }\n    },\n    handleUnauthenticatedUser() {\n      this.isLoggedIn = false;\n      this.userInfo = {};\n      alert(\"로그인이 필요합니다. 메인 화면으로 이동합니다.\");\n      this.$router.push(\"/\");\n    },\n    resetUserData() {\n      this.isLoggedIn = false;\n      this.userInfo = {};\n    },\n    initializeSocket() {\n      this.socket = io(`${process.env.VUE_APP_API_URL}`, {\n        withCredentials: true\n      });\n      this.socket.on(\"disconnect\", () => {\n        console.log(\"❌ 서버 연결 해제됨. 대기열에서 제거\");\n        this.isMatching = false;\n        this.matchFound = false;\n        this.waitingForOpponent = false;\n        this.opponentAccepted = false;\n        if (this.timer) clearInterval(this.timer);\n        this.clearAcceptCountdown();\n      });\n      this.socket.on(\"matchSuccess\", data => {\n        console.log(\"🔹 매칭 성공:\", data);\n        this.matchId = data.matchId;\n        this.matchFound = true;\n        this.waitingForOpponent = false;\n        // 매칭 성공 시 15초 카운트 다운 시작\n        this.startAcceptCountdown();\n      });\n      this.socket.on(\"matchRejected\", () => {\n        console.log(\"❌ 상대방이 매칭을 거절함\");\n        this.matchFound = false;\n        this.isMatching = false;\n        this.waitingForOpponent = false;\n        this.opponentAccepted = false;\n        if (this.timer) clearInterval(this.timer);\n        this.clearAcceptCountdown();\n        alert(\"⚠️ 상대방이 매칭을 거부했습니다. 다시 시도해주세요!\");\n      });\n      this.socket.on(\"matchConfirmed\", async data => {\n        if (data.matchId === this.matchId) {\n          this.opponentAccepted = true; // 🔹 상대방 수락\n          this.clearAcceptCountdown();\n          if (this.waitingForOpponent) {\n            // ✅ 둘 다 수락했으므로 채팅방으로 이동\n            this.$router.push(`/chatroom?matchId=${this.matchId}`);\n          }\n        }\n      });\n      this.socket.on(\"matchCancelled\", () => {\n        console.log(\"❌ 매칭 취소됨\");\n        this.matchFound = false;\n        this.isMatching = false;\n        this.waitingForOpponent = false;\n        this.opponentAccepted = false;\n        if (this.timer) clearInterval(this.timer);\n        this.clearAcceptCountdown();\n      });\n      this.socket.on('matchError', ({\n        message\n      }) => {\n        alert(`⚠️ 매칭 오류: ${message}`);\n        this.isMatching = false;\n        this.matchFound = false;\n        this.waitingForOpponent = false;\n        this.opponentAccepted = false;\n        if (this.timer) clearInterval(this.timer);\n        this.clearAcceptCountdown();\n      });\n    },\n    togglePosition(position) {\n      if (this.selectedPositions.includes(position)) {\n        this.selectedPositions = this.selectedPositions.filter(p => p !== position);\n      } else if (this.selectedPositions.length < 2) {\n        this.selectedPositions.push(position);\n      }\n    },\n    startMatching() {\n      this.isMatching = true;\n      this.waitingTime = 0;\n      this.timer = setInterval(() => {\n        this.waitingTime++;\n      }, 1000);\n      this.socket.emit(this.matchType === \"일반\" ? \"request normalmatch\" : \"request rankmatch\", {\n        position: this.selectedPositions,\n        microphone: this.microphone\n      });\n    },\n    acceptMatch() {\n      if (this.matchId) {\n        this.socket.emit(\"acceptMatch\", {\n          matchId: this.matchId\n        });\n        this.waitingForOpponent = true; // 🔹 상대방 응답 대기 상태 활성화\n        this.clearAcceptCountdown();\n      }\n      if (this.opponentAccepted) {\n        // ✅ 상대방도 수락한 상태 → 채팅방으로 이동\n        this.$router.push(`/chatroom?matchId=${this.matchId}`);\n      }\n    },\n    rejectMatch() {\n      if (this.matchId) {\n        this.socket.emit(\"rejectMatch\", {\n          matchId: this.matchId\n        });\n      }\n      this.isMatching = false;\n      this.matchFound = false;\n      this.waitingForOpponent = false;\n      this.opponentAccepted = false;\n      if (this.timer) clearInterval(this.timer);\n      this.clearAcceptCountdown();\n    },\n    cancelMatching() {\n      if (this.timer) clearInterval(this.timer);\n      this.isMatching = false;\n      this.socket.emit(\"cancel match\");\n      this.clearAcceptCountdown();\n    },\n    // 15초 수락 카운트 다운 시작\n    startAcceptCountdown() {\n      this.countdown = 15;\n      if (this.countdownTimer) clearInterval(this.countdownTimer);\n      this.countdownTimer = setInterval(() => {\n        if (this.countdown > 0) {\n          this.countdown--;\n        } else {\n          clearInterval(this.countdownTimer);\n          this.countdownTimer = null;\n          // 남은 시간이 0초가 되면 자동 거절 처리\n          this.rejectMatch();\n          alert(\"⚠️ 수락 시간이 초과되어 매칭이 거절되었습니다.\");\n        }\n      }, 1000);\n    },\n    // 카운트 다운 타이머 정리\n    clearAcceptCountdown() {\n      if (this.countdownTimer) {\n        clearInterval(this.countdownTimer);\n        this.countdownTimer = null;\n      }\n    }\n  },\n  computed: {\n    formattedTime() {\n      const minutes = Math.floor(this.waitingTime / 60);\n      const seconds = this.waitingTime % 60;\n      return `${minutes.toString().padStart(2, \"0\")}: ${seconds.toString().padStart(2, \"0\")}`;\n    }\n  },\n  beforeUnmount() {\n    if (this.timer) clearInterval(this.timer);\n    if (this.socket) this.socket.disconnect();\n    this.clearAcceptCountdown();\n  }\n};","map":{"version":3,"names":["io","data","socket","isLoggedIn","userInfo","selectedPositions","microphone","matchType","isMatching","matchFound","matchId","opponentAccepted","waitingForOpponent","waitingTime","timer","countdown","countdownTimer","positionIconSize","voiceIconWidth","voiceIconHeight","gameModeIconSize","positions","label","value","icon","voiceOptions","gameModes","mounted","checkLoginStatus","initializeSocket","methods","fetchLatestMatchData","response","fetch","process","env","VUE_APP_API_URL","method","credentials","headers","result","json","success","alert","message","error","console","ok","loggedIn","user","handleUnauthenticatedUser","$router","push","resetUserData","withCredentials","on","log","clearInterval","clearAcceptCountdown","startAcceptCountdown","togglePosition","position","includes","filter","p","length","startMatching","setInterval","emit","acceptMatch","rejectMatch","cancelMatching","computed","formattedTime","minutes","Math","floor","seconds","toString","padStart","beforeUnmount","disconnect"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/components/MatchQueue.vue"],"sourcesContent":["<template>\n    <div class=\"match-queue\">\n        <div class=\"match-container\">\n            <!-- ✅ 프로필 & 티어 정보 -->\n            <div class=\"profile-rank-container\">\n                <div class=\"profile-section\">\n                    <div class=\"profile-picture\">\n                        <img :src=\"`http://ddragon.leagueoflegends.com/cdn/14.22.1/img/profileicon/${userInfo.summonerInfo?.profileIconId}.png`\"\n                            alt=\"소환사 아이콘\" class=\"summoner-icon\" />\n                    </div>\n                    <span>안녕하세요, {{ userInfo.nickname }}님!</span>\n                    <div class=\"user-rank-container\">\n                        <div class=\"rank-info\">\n                            <img :src=\"userInfo.summonerRank?.[0]\n                                ? `https://raw.communitydragon.org/latest/plugins/rcp-fe-lol-shared-components/global/default/${userInfo.summonerRank[0].tier.toLowerCase()}.png`\n                                : 'https://raw.communitydragon.org/latest/plugins/rcp-fe-lol-shared-components/global/default/unranked.png'\"\n                                alt=\"티어 아이콘\" class=\"rank-icon\" />\n                            <span class=\"rank-text\">\n                                {{ userInfo.summonerRank?.[0]\n                                    ? userInfo.summonerRank[0].tier + ' ' + userInfo.summonerRank[0].rank\n                                    : '랭크 정보 없음' }}\n                            </span>\n                        </div>\n                        <button class=\"refresh-button\" @click=\"fetchLatestMatchData\">전적 갱신</button>\n                    </div>\n                </div>\n            </div>\n\n            <!-- ✅ 포지션 선택 -->\n            <div class=\"selection-section\">\n                <h2>포지션 (중복 2개 가능)</h2>\n                <div class=\"position-options\">\n                    <div v-for=\"pos in positions\" :key=\"pos.value\"\n                        :class=\"{ selected: selectedPositions.includes(pos.value) }\" @click=\"togglePosition(pos.value)\">\n                        <img :src=\"pos.icon\" :alt=\"pos.label\" />\n                        <span>{{ pos.label }}</span>\n                    </div>\n                </div>\n            </div>\n\n            <!-- ✅ 음성 채팅 사용 여부 -->\n            <div class=\"selection-section\">\n                <h2>음성 채팅 사용 여부</h2>\n                <div class=\"voice-options\">\n                    <div v-for=\"voice in voiceOptions\" :key=\"voice.value\"\n                        :class=\"{ active: microphone === voice.value }\" @click=\"microphone = voice.value\">\n                        <img :src=\"voice.icon\" :alt=\"voice.label\" />\n                        <span>{{ voice.label }}</span>\n                    </div>\n                </div>\n            </div>\n\n            <!-- ✅ 일반/랭크 선택 -->\n            <div class=\"selection-section\">\n                <h2>일반 / 랭크</h2>\n                <div class=\"game-mode-options\">\n                    <div v-for=\"mode in gameModes\" :key=\"mode.value\" :class=\"{ active: matchType === mode.value }\"\n                        @click=\"matchType = mode.value\">\n                        <img :src=\"mode.icon\" :alt=\"mode.label\" />\n                        <span>{{ mode.label }}</span>\n                    </div>\n                </div>\n            </div>\n\n            <!-- ✅ 매칭 버튼 -->\n            <button @click=\"startMatching\" :disabled=\"isMatching\" class=\"match-button\">\n                매칭 시작\n            </button>\n        </div>\n\n        <!-- ✅ 매칭 완료 팝업 -->\n        <div class=\"match-confirmation\" v-if=\"matchFound && !waitingForOpponent\">\n            <div class=\"match-info\">\n                <p class=\"match-text\">매칭 완료!!</p>\n                <!-- 15초 카운트 다운 표시 -->\n                <p>남은 시간: {{ countdown }}초</p>\n            </div>\n            <div class=\"match-buttons\">\n                <button class=\"reject-button\" @click=\"rejectMatch\">거절</button>\n                <button class=\"accept-button\" @click=\"acceptMatch\">수락</button>\n            </div>\n        </div>\n\n        <!-- ✅ \"상대방 응답 대기\" 팝업 -->\n        <div class=\"waiting-popup\" v-if=\"waitingForOpponent\">\n            <div class=\"popup-content\">\n                <p>상대방의 응답을 기다리고 있습니다...</p>\n                <img src=\"/icons/loading.png\" alt=\"Loading\" class=\"loading-icon\" />\n            </div>\n        </div>\n\n        <!-- ✅ \"매칭 중\" UI -->\n        <div class=\"popup-overlay\" v-if=\"isMatching && !matchFound && !waitingForOpponent\">\n            <div class=\"popup-content\">\n                <img src=\"/icons/loading.png\" alt=\"Loading\" class=\"loading-icon\" />\n                <p class=\"waiting-time\">{{ formattedTime }}</p>\n                <p>상대를 찾고 있습니다. 잠시만 기다려 주세요.</p>\n                <button @click=\"cancelMatching\">취소</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { io } from \"socket.io-client\";\n\nexport default {\n    data() {\n        return {\n            socket: null,\n            isLoggedIn: false,\n            userInfo: {},\n            selectedPositions: [],\n            microphone: \"미사용\",\n            matchType: \"일반\",\n            isMatching: false,\n            matchFound: false,\n            matchId: null,\n            opponentAccepted: false, // 🔹 상대방 수락 여부\n            waitingForOpponent: false, // 🔹 상대 응답 대기 상태\n            waitingTime: 0,\n            timer: null,\n\n            // 15초 카운트 다운 관련 변수 추가\n            countdown: 15,\n            countdownTimer: null,\n\n            positionIconSize: 40,\n            voiceIconWidth: 50,\n            voiceIconHeight: 80,\n            gameModeIconSize: 120,\n\n            positions: [\n                { label: \"탑\", value: \"탑\", icon: \"/icons/top.png\" },\n                { label: \"정글\", value: \"정글\", icon: \"/icons/jungle.png\" },\n                { label: \"미드\", value: \"미드\", icon: \"/icons/mid.png\" },\n                { label: \"원딜\", value: \"원딜\", icon: \"/icons/adc.png\" },\n                { label: \"서포터\", value: \"서포터\", icon: \"/icons/support.png\" },\n                { label: \"없음\", value: \"없음\", icon: \"/icons/none.png\" },\n            ],\n\n            voiceOptions: [\n                { label: \"사용\", value: \"사용\", icon: \"/icons/mic-on.png\" },\n                { label: \"미사용\", value: \"미사용\", icon: \"/icons/mic-off.png\" }\n            ],\n\n            gameModes: [\n                { label: \"일반\", value: \"일반\", icon: \"/icons/normal.png\" },\n                { label: \"랭크\", value: \"랭크\", icon: \"/icons/rank.png\" }\n            ]\n        };\n    },\n\n    async mounted() {\n        await this.checkLoginStatus(); // 로그인 상태 확인\n        this.initializeSocket();\n    },\n\n    methods: {\n        async fetchLatestMatchData() {\n            try {\n                const response = await fetch(`${process.env.VUE_APP_API_URL}/updateSummonerInfo`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                    headers: { \"Content-Type\": \"application/json\" }\n                });\n                const result = await response.json();\n                if (result.success) {\n                    alert(\"소환사 정보 갱신 성공\");\n                    await this.checkLoginStatus();\n                } else {\n                    alert(\"소환사 정보 갱신 실패: \" + result.message);\n                }\n            } catch (error) {\n                console.error(\"소환사 정보 갱신 오류:\", error);\n                alert(\"소환사 정보 갱신 중 오류 발생\");\n            }\n        },\n\n        async checkLoginStatus() {\n            try {\n                const response = await fetch(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n                    method: \"GET\",\n                    credentials: \"include\",\n                });\n                if (response.ok) {\n                    const data = await response.json();\n                    this.isLoggedIn = data.loggedIn;\n                    if (data.loggedIn) {\n                        this.userInfo = data.user || {};\n                    } else {\n                        this.handleUnauthenticatedUser();\n                    }\n                } else {\n                    this.handleUnauthenticatedUser();\n                }\n            } catch (error) {\n                console.error(\"❌ 로그인 상태 확인 오류:\", error);\n                this.handleUnauthenticatedUser();\n            }\n        },\n\n        handleUnauthenticatedUser() {\n            this.isLoggedIn = false;\n            this.userInfo = {};\n            alert(\"로그인이 필요합니다. 메인 화면으로 이동합니다.\");\n            this.$router.push(\"/\");\n        },\n\n        resetUserData() {\n            this.isLoggedIn = false;\n            this.userInfo = {};\n        },\n\n        initializeSocket() {\n            this.socket = io(`${process.env.VUE_APP_API_URL}`, { withCredentials: true });\n\n            this.socket.on(\"disconnect\", () => {\n                console.log(\"❌ 서버 연결 해제됨. 대기열에서 제거\");\n                this.isMatching = false;\n                this.matchFound = false;\n                this.waitingForOpponent = false;\n                this.opponentAccepted = false;\n                if (this.timer) clearInterval(this.timer);\n                this.clearAcceptCountdown();\n            });\n\n            this.socket.on(\"matchSuccess\", (data) => {\n                console.log(\"🔹 매칭 성공:\", data);\n                this.matchId = data.matchId;\n                this.matchFound = true;\n                this.waitingForOpponent = false;\n                // 매칭 성공 시 15초 카운트 다운 시작\n                this.startAcceptCountdown();\n            });\n\n            this.socket.on(\"matchRejected\", () => {\n                console.log(\"❌ 상대방이 매칭을 거절함\");\n                this.matchFound = false;\n                this.isMatching = false;\n                this.waitingForOpponent = false;\n                this.opponentAccepted = false;\n                if (this.timer) clearInterval(this.timer);\n                this.clearAcceptCountdown();\n                alert(\"⚠️ 상대방이 매칭을 거부했습니다. 다시 시도해주세요!\");\n            });\n\n            this.socket.on(\"matchConfirmed\", async (data) => {\n                if (data.matchId === this.matchId) {\n                    this.opponentAccepted = true; // 🔹 상대방 수락\n                    this.clearAcceptCountdown();\n                    if (this.waitingForOpponent) {\n                        // ✅ 둘 다 수락했으므로 채팅방으로 이동\n                        this.$router.push(`/chatroom?matchId=${this.matchId}`);\n                    }\n                }\n            });\n\n            this.socket.on(\"matchCancelled\", () => {\n                console.log(\"❌ 매칭 취소됨\");\n                this.matchFound = false;\n                this.isMatching = false;\n                this.waitingForOpponent = false;\n                this.opponentAccepted = false;\n                if (this.timer) clearInterval(this.timer);\n                this.clearAcceptCountdown();\n            });\n\n            this.socket.on('matchError', ({ message }) => {\n                alert(`⚠️ 매칭 오류: ${message}`);\n                this.isMatching = false;\n                this.matchFound = false;\n                this.waitingForOpponent = false;\n                this.opponentAccepted = false;\n                if (this.timer) clearInterval(this.timer);\n                this.clearAcceptCountdown();\n            });\n        },\n\n        togglePosition(position) {\n            if (this.selectedPositions.includes(position)) {\n                this.selectedPositions = this.selectedPositions.filter(p => p !== position);\n            } else if (this.selectedPositions.length < 2) {\n                this.selectedPositions.push(position);\n            }\n        },\n\n        startMatching() {\n            this.isMatching = true;\n            this.waitingTime = 0;\n            this.timer = setInterval(() => {\n                this.waitingTime++;\n            }, 1000);\n            this.socket.emit(\n                this.matchType === \"일반\" ? \"request normalmatch\" : \"request rankmatch\",\n                { position: this.selectedPositions, microphone: this.microphone }\n            );\n        },\n\n        acceptMatch() {\n            if (this.matchId) {\n                this.socket.emit(\"acceptMatch\", { matchId: this.matchId });\n                this.waitingForOpponent = true; // 🔹 상대방 응답 대기 상태 활성화\n                this.clearAcceptCountdown();\n            }\n            if (this.opponentAccepted) {\n                // ✅ 상대방도 수락한 상태 → 채팅방으로 이동\n                this.$router.push(`/chatroom?matchId=${this.matchId}`);\n            }\n        },\n\n        rejectMatch() {\n            if (this.matchId) {\n                this.socket.emit(\"rejectMatch\", { matchId: this.matchId });\n            }\n            this.isMatching = false;\n            this.matchFound = false;\n            this.waitingForOpponent = false;\n            this.opponentAccepted = false;\n            if (this.timer) clearInterval(this.timer);\n            this.clearAcceptCountdown();\n        },\n\n        cancelMatching() {\n            if (this.timer) clearInterval(this.timer);\n            this.isMatching = false;\n            this.socket.emit(\"cancel match\");\n            this.clearAcceptCountdown();\n        },\n\n        // 15초 수락 카운트 다운 시작\n        startAcceptCountdown() {\n            this.countdown = 15;\n            if (this.countdownTimer) clearInterval(this.countdownTimer);\n            this.countdownTimer = setInterval(() => {\n                if (this.countdown > 0) {\n                    this.countdown--;\n                } else {\n                    clearInterval(this.countdownTimer);\n                    this.countdownTimer = null;\n                    // 남은 시간이 0초가 되면 자동 거절 처리\n                    this.rejectMatch();\n                    alert(\"⚠️ 수락 시간이 초과되어 매칭이 거절되었습니다.\");\n                }\n            }, 1000);\n        },\n\n        // 카운트 다운 타이머 정리\n        clearAcceptCountdown() {\n            if (this.countdownTimer) {\n                clearInterval(this.countdownTimer);\n                this.countdownTimer = null;\n            }\n        }\n    },\n\n    computed: {\n        formattedTime() {\n            const minutes = Math.floor(this.waitingTime / 60);\n            const seconds = this.waitingTime % 60;\n            return `${minutes.toString().padStart(2, \"0\")}: ${seconds\n                .toString()\n                .padStart(2, \"0\")\n                }`;\n        }\n    },\n\n    beforeUnmount() {\n        if (this.timer) clearInterval(this.timer);\n        if (this.socket) this.socket.disconnect();\n        this.clearAcceptCountdown();\n    }\n};\n</script>\n\n<style scoped>\n.match-queue {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    width: 100vw;\n    background-color: #1e1e1e;\n}\n\n.match-container {\n    background-color: #333;\n    padding: 20px;\n    border-radius: 10px;\n    color: white;\n    width: 600px;\n    max-width: 80%;\n}\n\n/* ✅ 프로필 영역 */\n.profile-section {\n    display: flex;\n    align-items: center;\n    gap: 15px;\n}\n\n.profile-picture {\n    width: 80px;\n    height: 80px;\n    background-color: #2c2c2c;\n    border-radius: 50%;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.summoner-icon {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    border-radius: 50%;\n}\n\n.profile-section span {\n    font-size: 18px;\n    font-weight: bold;\n    color: white;\n}\n\n.profile-rank-container {\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    max-width: 600px;\n    margin-bottom: 20px;\n}\n\n.user-rank-container {\n    position: absolute;\n    top: 0;\n    right: 0;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n.rank-info {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n    gap: 5px;\n}\n\n.rank-icon {\n    width: 70px;\n    height: 70px;\n    object-fit: contain;\n}\n\n.rank-text {\n    font-size: 18px;\n    font-weight: bold;\n    color: white;\n    margin-top: -5px;\n}\n\n.refresh-button {\n    padding: 10px 15px;\n    background: rgb(21, 81, 55);\n    color: white;\n    font-size: 14px;\n    font-weight: bold;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: background 0.3s ease, transform 0.2s ease;\n}\n\n.refresh-button:hover {\n    background: rgb(30, 100, 70);\n    transform: scale(1.05);\n}\n\n/* ✅ 포지션, 음성채팅, 게임모드 선택 스타일 */\n.position-options,\n.voice-options,\n.game-mode-options {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 20px;\n    flex-wrap: wrap;\n}\n\n.position-options div,\n.voice-options div,\n.game-mode-options div {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    text-align: center;\n}\n\n.position-options img {\n    width: 70px;\n    height: 70px;\n    transition: transform 0.2s;\n}\n\n.voice-options img[src*=\"mic-on.png\"] {\n    width: 50px;\n    height: 90px;\n}\n\n.voice-options img[src*=\"mic-off.png\"] {\n    width: 70px;\n    height: 90px;\n}\n\n.game-mode-options img {\n    width: 140px;\n    height: 140px;\n    transition: transform 0.2s;\n}\n\n.position-options img:hover,\n.voice-options img:hover,\n.game-mode-options img:hover {\n    transform: scale(1.1);\n}\n\n.selected img,\n.active img {\n    border: 3px solid rgb(21, 81, 55);\n    border-radius: 10px;\n}\n\n/* ✅ 매칭 버튼 */\n.match-button {\n    display: block;\n    margin: 20px auto;\n    width: 50%;\n    padding: 10px;\n    font-size: 16px;\n    background-color: rgb(21, 81, 55);\n    color: white;\n    border: none;\n    border-radius: 90px;\n    cursor: pointer;\n}\n\n.match-button:disabled {\n    background-color: #555;\n    cursor: not-allowed;\n}\n\n/* ✅ 매칭 완료 팝업 (크기 완전히 고정) */\n.match-confirmation {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 400px !important;\n    /* 고정된 가로 크기 */\n    height: 200px !important;\n    /* 고정된 세로 크기 */\n    background: #222;\n    color: white;\n    border-radius: 15px;\n    padding: 20px;\n    text-align: center;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);\n}\n\n/* ✅ 수락/거절 버튼 컨테이너 */\n.match-buttons {\n    display: flex;\n    gap: 10px;\n    margin-top: 15px;\n}\n\n.reject-button,\n.accept-button {\n    padding: 12px 30px;\n    font-size: 16px;\n    border: none;\n    cursor: pointer;\n    border-radius: 45px;\n}\n\n.reject-button {\n    background: none;\n    border: 2px solid white;\n    color: white;\n}\n\n.accept-button {\n    background: rgb(21, 81, 55);\n    color: white;\n}\n\n/* ✅ 작은 화면에서도 크기 유지 */\n@media (max-width: 768px) {\n    .match-confirmation {\n        width: 400px !important;\n        /* 모바일에서도 크기 고정 */\n        height: 200px !important;\n    }\n}\n\n/* ✅ 매칭 중 UI 배경 (팝업 전체 배경) */\n.popup-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.8);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.popup-content {\n    background: rgb(66, 66, 66);\n    padding: 30px;\n    border-radius: 15px;\n    text-align: center;\n    width: 300px;\n    height: 500px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.popup-content p {\n    color: white;\n    font-size: 15px;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 10px;\n}\n\n.loading-icon {\n    width: 80px;\n    height: 80px;\n    margin-top: 10px;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    from {\n        transform: rotate(0deg);\n    }\n\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n.popup-content button {\n    padding: 12px 20px;\n    background: rgb(66, 66, 66);\n    color: white;\n    font-size: 16px;\n    border: 1px solid white;\n    border-radius: 10px;\n    cursor: pointer;\n    margin-top: 15px;\n    transition: transform 0.2s ease;\n}\n\n.popup-content button:hover {\n    transform: scale(1.05);\n}\n\n.waiting-popup {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: rgb(66, 66, 66);\n    color: white;\n    padding: 30px;\n    border-radius: 12px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 300px;\n    height: 400px;\n}\n\n.waiting-time {\n    font-size: 24px;\n    font-weight: bold;\n    margin: 10px 0;\n}\n\n@media (max-width: 768px) {\n    .match-container {\n        width: 90%;\n    }\n\n    .match-confirmation {\n        width: 90%;\n        height: auto;\n    }\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}