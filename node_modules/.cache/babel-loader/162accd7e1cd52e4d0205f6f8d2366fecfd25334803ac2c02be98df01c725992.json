{"ast":null,"code":"export default {\n  data() {\n    return {\n      form: {\n        userid: '',\n        password: ''\n      },\n      errorMessage: '',\n      // 아이디 찾기용\n      rqid: false,\n      emailForId: '',\n      isButtonDisabledId: false,\n      timerId: 0,\n      messageId: '',\n      successId: false,\n      // 비밀번호 재설정용\n      rqpassword: false,\n      emailForPassword: '',\n      isButtonDisabledPassword: false,\n      timerPassword: 0,\n      messagePassword: '',\n      successPassword: false\n    };\n  },\n  methods: {\n    openFindIdModal() {\n      this.rqid = true;\n      this.messageId = '';\n      this.successId = false;\n      this.emailForId = '';\n    },\n    openPasswordResetModal() {\n      this.rqpassword = true;\n      this.messagePassword = '';\n      this.successPassword = false;\n      this.emailForPassword = '';\n    },\n    async handleLogin() {\n      try {\n        const response = await fetch('http://localhost:3000/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          // 쿠키 포함\n          body: JSON.stringify(this.form)\n        });\n        if (response.ok) {\n          // 성공적으로 로그인하면 홈으로 이동\n          window.location.href = '/';\n        } else {\n          // 에러 메시지 처리\n          const errorText = await response.json();\n          this.errorMessage = errorText.message;\n        }\n      } catch (error) {\n        console.error('Login error:', error);\n        this.errorMessage = '로그인 중 오류가 발생했습니다. 다시 시도해주세요.';\n      }\n    },\n    async requestUserId() {\n      if (this.isButtonDisabledId) return;\n      this.isButtonDisabledId = true;\n      this.timerId = 60;\n      const countdownId = setInterval(() => {\n        this.timerId--;\n        if (this.timerId <= 0) {\n          clearInterval(countdownId);\n          this.isButtonDisabledId = false;\n        }\n      }, 1000);\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/request-userid`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.emailForId\n          })\n        });\n        const result = await response.json();\n        if (result.success) {\n          this.successId = true;\n          this.messageId = '아이디가 이메일로 전송되었습니다.';\n        } else {\n          this.successId = false;\n          this.messageId = result.message;\n        }\n      } catch (error) {\n        console.error('Error requesting user ID:', error);\n        this.successId = false;\n        this.messageId = '아이디 요청 중 오류가 발생했습니다.';\n      }\n    },\n    async requestResetLink() {\n      if (this.isButtonDisabledPassword) return; // 버튼이 비활성화된 상태면 요청 막기\n\n      this.isButtonDisabledPassword = true; // 버튼 비활성화\n      this.timerPassword = 60; // 10초 대기 시간 설정\n      this.messagePassword = '';\n      const countdown = setInterval(() => {\n        this.timerPassword--;\n        if (this.timerPassword <= 0) {\n          clearInterval(countdown);\n          this.isButtonDisabledPassword = false; // 대기 시간 종료 시 버튼 활성화\n        }\n      }, 1000);\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/request-password-reset`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: this.emailForPassword\n          })\n        });\n        const result = await response.json();\n        this.successPassword = result.success;\n        this.messagePassword = result.message;\n      } catch (error) {\n        console.error('Error requesting password reset:', error);\n        this.successPassword = false;\n        this.messagePassword = '비밀번호 재설정 요청 중 오류가 발생했습니다.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","form","userid","password","errorMessage","rqid","emailForId","isButtonDisabledId","timerId","messageId","successId","rqpassword","emailForPassword","isButtonDisabledPassword","timerPassword","messagePassword","successPassword","methods","openFindIdModal","openPasswordResetModal","handleLogin","response","fetch","method","headers","credentials","body","JSON","stringify","ok","window","location","href","errorText","json","message","error","console","requestUserId","countdownId","setInterval","clearInterval","process","env","VUE_APP_API_URL","email","result","success","requestResetLink","countdown"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/components/LoginForm.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"login-container\">\n      <header class=\"header\">\n        <div class=\"logo\">\n          <div class=\"circle\">\n            <img src=\"/favicon.ico\" class=\"circle\" @click=\"$router.push('/')\" style=\"cursor: pointer;\" alt=\"\" />\n          </div>\n          <span>로그인</span>\n        </div>\n        <nav class=\"nav-links\">\n          <div class=\"nav-button\" @click=\"$router.push('/')\">홈</div>\n          <div class=\"nav-button\" @click=\"$router.push('/signup')\">회원가입</div>\n        </nav>\n      </header>\n\n      <main class=\"login-main\">\n        <div class=\"login-box\">\n          <h1 class=\"login-title\">로그인 정보를 입력해주세요</h1>\n          <form @submit.prevent=\"handleLogin\">\n            <div class=\"input-group\">\n              <input type=\"text\" v-model=\"form.userid\" placeholder=\"아이디\" required />\n            </div>\n            <div class=\"input-group\">\n              <input type=\"password\" v-model=\"form.password\" placeholder=\"비밀번호\" required />\n            </div>\n            <button type=\"submit\" class=\"login-button\">로그인</button>\n            <p class=\"error-message\" v-if=\"errorMessage\">{{ errorMessage }}</p>\n          </form>\n          <br />\n          <div class=\"actions-link\">\n            <a @click=\"openFindIdModal\">아이디 찾기</a>\n            <div class=\"modal-overlay\" v-if=\"rqid == true\">\n              <div class=\"modal-content\">\n                <h1>아이디 찾기</h1>\n                <form @submit.prevent=\"requestUserId\">\n                  <div>\n                    <label for=\"email\">이메일: </label>\n                    <input type=\"email\" id=\"email\" v-model=\"emailForId\" placeholder=\"이메일을 입력하세요\" required />\n                  </div>\n                  <button class=\"submit-button\" type=\"submit\" :disabled=\"isButtonDisabledId\">{{ isButtonDisabledId ?\n                    `${timerId}초 후 다시 요청` : '아이디 보내기' }}</button>\n                  <button class=\"cancel-button\" @click=\"rqid = false\">닫기</button>\n                </form>\n                <br />\n                <p v-if=\"messageId\" :class=\"successId ? 'success' : 'error'\">{{ messageId }}</p>\n              </div>\n\n            </div>\n            <a @click=\"openPasswordResetModal\">비밀번호 재설정</a>\n            <div class=\"modal-overlay\" v-if=\"rqpassword == true\">\n              <div class=\"modal-content\">\n                <h1>비밀번호 재설정 요청</h1>\n                <form @submit.prevent=\"requestResetLink\">\n                  <div>\n                    <label for=\"email\">이메일: </label>\n                    <input type=\"email\" id=\"email\" v-model=\"emailForPassword\" placeholder=\"이메일을 입력하세요\" required />\n                  </div>\n                  <button class=\"submit-button\" type=\"submit\" :disabled=\"isButtonDisabledPassword\">{{\n                    isButtonDisabledPassword ? `${timerPassword}초 후 다시 요청` : '비밀번호 재설정 링크 전송' }}</button>\n                  <button class=\"cancel-button\" @click=\"rqpassword = false\">닫기</button>\n                </form>\n                <br />\n                <p v-if=\"messagePassword\" :class=\"successPassword ? 'success' : 'error'\">{{ messagePassword }}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      form: {\n        userid: '',\n        password: '',\n      },\n      errorMessage: '',\n\n      // 아이디 찾기용\n      rqid: false,\n      emailForId: '',\n      isButtonDisabledId: false,\n      timerId: 0,\n      messageId: '',\n      successId: false,\n\n      // 비밀번호 재설정용\n      rqpassword: false,\n      emailForPassword: '',\n      isButtonDisabledPassword: false,\n      timerPassword: 0,\n      messagePassword: '',\n      successPassword: false,\n    };\n  },\n  methods: {\n    openFindIdModal() {\n      this.rqid = true;\n      this.messageId = '';\n      this.successId = false;\n      this.emailForId = '';\n    },\n    openPasswordResetModal() {\n      this.rqpassword = true;\n      this.messagePassword = '';\n      this.successPassword = false;\n      this.emailForPassword = '';\n    },\n    async handleLogin() {\n      try {\n        const response = await fetch('http://localhost:3000/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include', // 쿠키 포함\n          body: JSON.stringify(this.form),\n        });\n\n        if (response.ok) {\n          // 성공적으로 로그인하면 홈으로 이동\n          window.location.href = '/';\n        } else {\n          // 에러 메시지 처리\n          const errorText = await response.json();\n          this.errorMessage = errorText.message;\n        }\n      } catch (error) {\n        console.error('Login error:', error);\n        this.errorMessage = '로그인 중 오류가 발생했습니다. 다시 시도해주세요.';\n      }\n    },\n    async requestUserId() {\n      if (this.isButtonDisabledId) return;\n\n      this.isButtonDisabledId = true;\n      this.timerId = 60;\n\n      const countdownId = setInterval(() => {\n        this.timerId--;\n        if (this.timerId <= 0) {\n          clearInterval(countdownId);\n          this.isButtonDisabledId = false;\n        }\n      }, 1000);\n\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/request-userid`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ email: this.emailForId }),\n        });\n\n        const result = await response.json();\n\n        if (result.success) {\n          this.successId = true;\n          this.messageId = '아이디가 이메일로 전송되었습니다.';\n        } else {\n          this.successId = false;\n          this.messageId = result.message;\n        }\n      } catch (error) {\n        console.error('Error requesting user ID:', error);\n        this.successId = false;\n        this.messageId = '아이디 요청 중 오류가 발생했습니다.';\n      }\n    },\n    async requestResetLink() {\n      if (this.isButtonDisabledPassword) return; // 버튼이 비활성화된 상태면 요청 막기\n\n      this.isButtonDisabledPassword = true; // 버튼 비활성화\n      this.timerPassword = 60; // 10초 대기 시간 설정\n      this.messagePassword = '';\n\n      const countdown = setInterval(() => {\n        this.timerPassword--;\n        if (this.timerPassword <= 0) {\n          clearInterval(countdown);\n          this.isButtonDisabledPassword = false; // 대기 시간 종료 시 버튼 활성화\n        }\n      }, 1000);\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/request-password-reset`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ email: this.emailForPassword }),\n        });\n\n        const result = await response.json();\n        this.successPassword = result.success;\n        this.messagePassword = result.message;\n      } catch (error) {\n        console.error('Error requesting password reset:', error);\n        this.successPassword = false;\n        this.messagePassword = '비밀번호 재설정 요청 중 오류가 발생했습니다.';\n      }\n    },\n  },\n};\n</script>\n\n\n\n<style scoped>\n/* 전체 스타일 초기화 */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n}\n\nbody {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  background-color: #f4f4f4;\n}\n\n#app {\n  width: 100vw;\n  height: 100vh;\n}\n\n.login-container {\n  height: 100vh;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  background-color: #212121;\n  color: #fff;\n  font-family: 'Arial', sans-serif;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  background-color: #424242;\n  color: #FAFAFA;\n  height: 50px;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.circle {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: #15513775;\n}\n\n.nav-links {\n  display: flex;\n  gap: 4px;\n  align-items: stretch;\n}\n\n.nav-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n  width: 80px;\n  padding: 0 16px;\n  background-color: transparent;\n  color: #FAFAFA;\n  border-radius: 0;\n  font-size: 12px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.nav-button:hover {\n  background-color: #212121;\n}\n\n.nav-links a,\n.nav-links router-link {\n  gap: 10px;\n  margin-left: 20px;\n  color: #FAFAFA;\n  text-decoration: none;\n  font-size: 10px;\n}\n\n.nav-links a:hover,\n.nav-links router-link:hover {\n  text-decoration: underline;\n}\n\n.login-main {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.login-box {\n  background-color: #212121;\n  padding: 40px;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n  width: 100%;\n  max-width: 400px;\n  text-align: center;\n}\n\n.login-title {\n  font-size: 20px;\n  margin-bottom: 20px;\n}\n\n.input-group {\n  margin-bottom: 15px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n.login-button {\n  width: 40%;\n  padding: 8px;\n  background-color: #15513775;\n  color: #fafafa;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n}\n\n.login-button:hover {\n  background-color: #15513775;\n}\n\n.actions-link a,\n.actions-link router-link {\n  color: #fafafa;\n  text-decoration: none;\n  font-size: 12px;\n  margin: 0px 10px 0px 10px;\n  cursor: pointer;\n}\n\n.actions-link a:hover,\n.actions-link router-link:hover {\n  text-decoration: underline;\n}\n\n.error-message {\n  color: red;\n  margin-top: 10px;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background-color: #2a2a2a;\n  color: white;\n  width: 80%;\n  max-width: 500px;\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n}\n\n.modal-content h1 {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.modal-content label {\n  font-size: 14px;\n  margin-bottom: 5px;\n}\n\n.modal-content input {\n  padding: 8px;\n  font-size: 14px;\n  border: 1px solid #555;\n  border-radius: 4px;\n  background-color: #FFFFFF;\n  color: #000000;\n  width: 90%;\n  /* 인풋 박스 너비를 늘림 */\n  max-width: 300px;\n  /* 최대 너비 제한 */\n}\n\n.modal-content input::placeholder {\n  color: #888;\n}\n\n.modal-content input:focus {\n  outline: none;\n  border-color: #15513775;\n}\n\n.cancel-button {\n  flex: 1;\n  padding: 8px;\n  font-size: 14px;\n  background-color: transparent;\n  border: 1px solid #fafafa;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-top: 10px;\n  /* 버튼과 위 요소 사이 간격 */\n  margin-left: 10px;\n\n}\n\n.cancel-button:hover {\n  background-color: #444;\n}\n\n.submit-button {\n  flex: 1;\n  padding: 8px;\n  font-size: 14px;\n  background-color: #15513775;\n  border: none;\n  color: #fff;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-top: 10px;\n  /* 버튼과 위 요소 사이 간격 */\n  margin-right: 30px;\n}\n\n.submit-button:hover {\n  background-color: #15513775;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}