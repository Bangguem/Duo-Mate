{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport axios from 'axios';\nexport default {\n  props: ['id'],\n  // 라우터 params로 받은 게시글 ID\n  data() {\n    return {\n      post: null,\n      // 게시글 데이터\n      currentUser: null,\n      // 현재 로그인한 사용자\n      loading: true,\n      // 로딩 상태\n      isEditing: false,\n      // 게시글 수정 모드\n      editedTitle: '',\n      // 수정 중인 제목\n      editedContent: '',\n      // 수정 중인 내용\n      comments: [],\n      // 댓글 리스트\n      newComment: '',\n      // 새 댓글 내용\n      editingCommentId: null,\n      // 수정 중인 댓글 ID\n      editingContent: '',\n      // 수정 중인 댓글 내용\n      sortOrder: 'latest',\n      // 댓글 정렬 기준\n      editedImage: null // 새 이미지 파일 저장 변수 추가\n    };\n  },\n  computed: {\n    // 현재 게시글 작성자인지 판단\n    isAuthor() {\n      return this.currentUser?.nickname === this.post?.author;\n    },\n    // 정렬된 댓글 목록\n    sortedComments() {\n      return [...this.comments].sort((a, b) => {\n        if (this.sortOrder === 'latest') {\n          return new Date(b.createdAt) - new Date(a.createdAt); // 최신순\n        } else if (this.sortOrder === 'oldest') {\n          return new Date(a.createdAt) - new Date(b.createdAt); // 오래된순\n        } else if (this.sortOrder === 'likes') {\n          return (b.likes || 0) - (a.likes || 0); // 좋아요순\n        }\n      });\n    }\n  },\n  methods: {\n    // 초기 데이터 로드\n    async loadData() {\n      this.loading = true;\n      try {\n        // 게시글, 댓글, 유저 정보 한번에 불러오기\n        await Promise.all([this.fetchPost(), this.fetchComments(), this.fetchCurrentUser()]);\n      } catch (error) {\n        console.error('데이터를 가져오는 중 오류 발생:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 게시글 가져오기\n    async fetchPost() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, {\n          withCredentials: true\n        });\n        this.post = response.data;\n        this.editedTitle = this.post.title;\n        this.editedContent = this.post.content;\n      } catch (error) {\n        console.error('게시글을 가져오는 중 오류 발생:', error);\n        this.post = null;\n      }\n    },\n    // 댓글 가져오기\n    async fetchComments() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board/${this.id}/comments`, {\n          withCredentials: true\n        });\n        this.comments = response.data;\n      } catch (error) {\n        console.error('댓글을 가져오는 중 오류 발생:', error);\n      }\n    },\n    // 현재 로그인 유저 가져오기\n    async fetchCurrentUser() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          withCredentials: true\n        });\n        if (response.data.loggedIn) {\n          this.currentUser = response.data.user;\n        }\n      } catch (error) {\n        console.error('현재 사용자 정보를 가져오는 데 실패했습니다:', error);\n        this.currentUser = null;\n      }\n    },\n    // 날짜 포맷\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    // 게시글 수정 진입\n    enterEditMode() {\n      this.isEditing = true;\n    },\n    // 게시글 수정 취소\n    cancelEdit() {\n      this.isEditing = false;\n      // 원래 값으로 복구\n      this.editedTitle = this.post.title;\n      this.editedContent = this.post.content;\n    },\n    // 게시글 수정 완료\n    async updatePost() {\n      try {\n        if (this.editedImage) {\n          // 파일이 첨부된 경우, FormData를 사용하여 전송\n          const formData = new FormData();\n          formData.append('title', this.editedTitle);\n          formData.append('content', this.editedContent);\n          formData.append('image', this.editedImage);\n          await axios.put(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, formData, {\n            withCredentials: true,\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n        } else {\n          // 파일 없이 텍스트만 수정하는 경우\n          await axios.put(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, {\n            title: this.editedTitle,\n            content: this.editedContent\n          }, {\n            withCredentials: true\n          });\n        }\n        // 수정이 완료된 후 최신 데이터를 서버에서 다시 불러와 화면 갱신\n        await this.fetchPost();\n        this.isEditing = false;\n        alert('게시글이 수정되었습니다.');\n      } catch (error) {\n        console.error('게시글 수정 중 오류 발생:', error);\n        alert('게시글 수정에 실패했습니다.');\n      }\n    },\n    // 게시글 삭제\n    async deletePost() {\n      try {\n        await axios.delete(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, {\n          withCredentials: true\n        });\n        alert('게시글이 삭제되었습니다.');\n        this.$router.push('/board');\n      } catch (error) {\n        console.error('게시글 삭제 중 오류 발생:', error);\n      }\n    },\n    // 게시글 좋아요\n    async likePost() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        const response = await axios.put(`${process.env.VUE_APP_API_URL}/api/board/${this.id}/like`, {\n          action: 'like'\n        }, {\n          withCredentials: true\n        });\n        this.post.likes = response.data.likes;\n        this.post.dislikes = response.data.dislikes;\n      } catch (error) {\n        console.error('좋아요 처리 중 오류 발생:', error);\n        alert('좋아요 처리에 실패했습니다.');\n      }\n    },\n    // 게시글 싫어요\n    async dislikePost() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        const response = await axios.put(`${process.env.VUE_APP_API_URL}/api/board/${this.id}/like`, {\n          action: 'dislike'\n        }, {\n          withCredentials: true\n        });\n        this.post.likes = response.data.likes;\n        this.post.dislikes = response.data.dislikes;\n      } catch (error) {\n        console.error('싫어요 처리 중 오류 발생:', error);\n        alert('싫어요 처리에 실패했습니다.');\n      }\n    },\n    // 댓글 작성\n    async submitComment() {\n      if (!this.newComment.trim()) {\n        alert('댓글 내용을 입력해주세요.');\n        return;\n      }\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_URL}/api/board/${this.id}/comments`, {\n          content: this.newComment\n        }, {\n          withCredentials: true\n        });\n        this.comments.push(response.data);\n        this.newComment = '';\n      } catch (error) {\n        console.error('댓글 작성 중 오류 발생:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    // 댓글 수정 시작\n    startEditingComment(commentId, content) {\n      this.editingCommentId = commentId;\n      this.editingContent = content;\n    },\n    // 댓글 수정 취소\n    cancelEditing() {\n      this.editingCommentId = null;\n      this.editingContent = '';\n    },\n    // 댓글 수정 완료\n    async saveEditedComment(commentId) {\n      if (!this.editingContent.trim()) {\n        alert('수정할 내용을 입력해주세요.');\n        return;\n      }\n      try {\n        await axios.put(`${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}`, {\n          content: this.editingContent\n        }, {\n          withCredentials: true\n        });\n        const comment = this.comments.find(c => c._id === commentId);\n        if (comment) {\n          comment.content = this.editingContent;\n        }\n        this.cancelEditing();\n        alert('댓글이 수정되었습니다.');\n      } catch (error) {\n        console.error('댓글 수정 중 오류 발생:', error);\n        alert('댓글 수정에 실패했습니다.');\n      }\n    },\n    // 댓글 삭제\n    async deleteComment(commentId) {\n      try {\n        await axios.delete(`${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}`, {\n          withCredentials: true\n        });\n        this.comments = this.comments.filter(comment => comment._id !== commentId);\n        alert('댓글이 삭제되었습니다.');\n      } catch (error) {\n        console.error('댓글 삭제 중 오류 발생:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    // 댓글 좋아요\n    async likeComment(commentId) {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        await axios.put(`${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}/like`, {\n          action: 'like'\n        }, {\n          withCredentials: true\n        });\n        await this.fetchComments(); // 갱신\n      } catch (error) {\n        console.error('댓글 좋아요 처리 중 오류 발생:', error);\n      }\n    },\n    // 댓글 싫어요\n    async dislikeComment(commentId) {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        await axios.put(`${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}/like`, {\n          action: 'dislike'\n        }, {\n          withCredentials: true\n        });\n        await this.fetchComments(); // 갱신\n      } catch (error) {\n        console.error('댓글 싫어요 처리 중 오류 발생:', error);\n      }\n    },\n    // 댓글 정렬 이벤트 (옵션 변경 시 콘솔 로그)\n    sortComments() {\n      console.log(`정렬 기준이 ${this.sortOrder}로 변경되었습니다.`);\n    },\n    // 조회수 증가\n    async incrementViews() {\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_API_URL}/api/board/${this.id}/views`, {}, {\n          withCredentials: true\n        });\n        if (response.status === 200) {\n          this.post.views += 1;\n        }\n      } catch (error) {\n        console.error('조회수 증가 요청 중 오류 발생:', error);\n      }\n    },\n    // 개행 문자 -> <br> 치환\n    convertNewLinesToBreaks(text) {\n      return text.replace(/\\n/g, '<br>');\n    },\n    handleEditImageUpload(event) {\n      this.editedImage = event.target.files[0];\n    }\n  },\n  created() {\n    // 컴포넌트 생성 시 데이터 로드 -> 조회수 증가\n    this.loadData().then(() => {\n      this.incrementViews();\n    });\n  }\n};","map":{"version":3,"names":["axios","props","data","post","currentUser","loading","isEditing","editedTitle","editedContent","comments","newComment","editingCommentId","editingContent","sortOrder","editedImage","computed","isAuthor","nickname","author","sortedComments","sort","a","b","Date","createdAt","likes","methods","loadData","Promise","all","fetchPost","fetchComments","fetchCurrentUser","error","console","response","get","process","env","VUE_APP_API_URL","id","withCredentials","title","content","loggedIn","user","formatDate","dateString","date","toLocaleDateString","year","month","day","hour","minute","enterEditMode","cancelEdit","updatePost","formData","FormData","append","put","headers","alert","deletePost","delete","$router","push","likePost","action","dislikes","dislikePost","submitComment","trim","startEditingComment","commentId","cancelEditing","saveEditedComment","comment","find","c","_id","deleteComment","filter","likeComment","dislikeComment","sortComments","log","incrementViews","status","views","convertNewLinesToBreaks","text","replace","handleEditImageUpload","event","target","files","created","then"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/components/BoardDetail.vue"],"sourcesContent":["<template>\n  <div class=\"post-container\">\n    <!-- [1] 게시글 로드 중/에러 상태 -->\n    <div v-if=\"loading\" class=\"loading\">\n      <h2>로딩 중...</h2>\n    </div>\n    <div v-else-if=\"!post\" class=\"error\">\n      <h2>게시글을 불러오지 못했습니다.</h2>\n    </div>\n\n    <!-- [2] 게시글이 로드되었을 때 -->\n    <div v-else class=\"post-card\">\n      <!-- [2-1] 게시글 수정 모드 -->\n      <div v-if=\"isEditing\">\n        <h2>게시글 수정</h2>\n        <form @submit.prevent=\"updatePost\" class=\"edit-form\">\n          <input v-model=\"editedTitle\" type=\"text\" placeholder=\"제목을 입력하세요\" required class=\"input-field\" />\n          <textarea v-model=\"editedContent\" placeholder=\"내용을 입력하세요\" required class=\"textarea-field\"></textarea>\n\n          <!-- 파일 첨부 입력 추가 -->\n          <input type=\"file\" @change=\"handleEditImageUpload\" accept=\"image/*\" />\n\n          <div class=\"form-buttons\">\n            <button type=\"submit\" class=\"save-btn\">수정 완료</button>\n            <button type=\"button\" @click=\"cancelEdit\" class=\"cancel-btn\">취소</button>\n          </div>\n        </form>\n      </div>\n\n      <!-- [2-2] 게시글 일반 보기 모드 -->\n      <div v-else>\n        <!-- 제목/작성자/조회수 영역 -->\n        <div class=\"post-header\">\n          <h1>{{ post.title }}</h1>\n          <div class=\"post-meta\">\n            <span>작성자: <strong>{{ post.author || '익명' }}</strong></span>\n            <span>작성일: {{ formatDate(post.createdAt) }}</span>\n            <span>조회수: {{ post.views || 0 }}</span>\n          </div>\n        </div>\n\n        <!-- 게시글 본문 -->\n        <p class=\"post-content\" v-html=\"convertNewLinesToBreaks(post.content)\"></p>\n\n        <!-- 이미지가 있을 경우 보여주기 -->\n        <div v-if=\"post.imageUrl\" class=\"post-image\">\n          <img :src=\"`${process.env.VUE_APP_API_URL}${post.imageUrl}?t=${new Date().getTime()}`\" alt=\"게시글 이미지\" />\n        </div>\n\n        <!-- 좋아요/싫어요 -->\n        <div class=\"action-buttons\">\n          <button @click=\"likePost\" class=\"like-btn\">\n            👍 좋아요 ({{ post.likes }})\n          </button>\n          <button @click=\"dislikePost\" class=\"like-btn\" style=\"margin-left:8px;\">\n            👎 싫어요 ({{ post.dislikes }})\n          </button>\n        </div>\n\n        <!-- 게시글 수정/삭제 버튼 (글 작성자만) -->\n        <div v-if=\"isAuthor\" class=\"edit-actions\">\n          <button @click=\"enterEditMode\" class=\"edit-btn\">✏️ 수정</button>\n          <button @click=\"deletePost\" class=\"delete-btn\">🗑 삭제</button>\n        </div>\n      </div>\n\n      <!-- [3] 댓글 섹션 -->\n      <div class=\"comments-section\" v-if=\"!isEditing\">\n        <h3>댓글 ({{ comments.length }})</h3>\n\n        <!-- 댓글 정렬 옵션 (댓글이 1개 이상일 때만 표시) -->\n        <div v-if=\"comments.length > 0\" style=\"margin-bottom: 15px;\">\n          <label for=\"comment-sort\" style=\"margin-right:6px;\">정렬 기준:</label>\n          <select id=\"comment-sort\" v-model=\"sortOrder\" @change=\"sortComments\"\n            style=\"border-radius:5px; background:#444; color:white; border:none; padding:4px 8px;\">\n            <option value=\"latest\">최신순</option>\n            <option value=\"oldest\">오래된순</option>\n            <option value=\"likes\">좋아요순</option>\n          </select>\n        </div>\n\n        <!-- 댓글 작성 영역 (로그인 유저 & 수정 중 아닐 때만 보임) -->\n        <div v-if=\"currentUser && !isEditing\" class=\"comment-input\">\n          <textarea v-model=\"newComment\" placeholder=\"댓글을 입력하세요\"></textarea>\n          <button @click=\"submitComment\" class=\"comment-submit\">댓글 작성</button>\n        </div>\n\n        <!-- 댓글 리스트 -->\n        <ul class=\"comment-list\">\n          <li v-for=\"comment in sortedComments\" :key=\"comment._id\" class=\"comment-item\">\n            <div class=\"comment-header\">\n              <strong>{{ comment.nickname }}</strong>\n              <span> | {{ formatDate(comment.createdAt) }}</span>\n            </div>\n\n            <!-- 댓글 수정 모드 -->\n            <div v-if=\"editingCommentId === comment._id\">\n              <textarea v-model=\"editingContent\" class=\"textarea-field\"></textarea>\n              <div class=\"comment-actions\">\n                <button @click=\"saveEditedComment(comment._id)\" class=\"save-btn\">\n                  저장\n                </button>\n                <button @click=\"cancelEditing\" class=\"cancel-btn\">취소</button>\n              </div>\n            </div>\n\n            <!-- 댓글 보기 모드 -->\n            <div v-else>\n              <p v-html=\"convertNewLinesToBreaks(comment.content)\"></p>\n              <div class=\"comment-actions\">\n                <!-- 좋아요/싫어요 -->\n                <button @click=\"likeComment(comment._id)\" class=\"like-btn\">\n                  👍 ({{ comment.likes || 0 }})\n                </button>\n                <button @click=\"dislikeComment(comment._id)\" class=\"like-btn\" style=\"margin-left:8px;\">\n                  👎 ({{ comment.dislikes || 0 }})\n                </button>\n\n                <!-- 댓글 수정/삭제 버튼 (작성자만 노출) -->\n                <div v-if=\"currentUser?.userid === comment.userId\" style=\"display:inline-block; margin-left:10px;\">\n                  <button @click=\"startEditingComment(comment._id, comment.content)\" class=\"edit-btn\">✏️ 수정</button>\n                  <button @click=\"deleteComment(comment._id)\" class=\"delete-btn\">🗑 삭제</button>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: ['id'], // 라우터 params로 받은 게시글 ID\n  data() {\n    return {\n      post: null,            // 게시글 데이터\n      currentUser: null,     // 현재 로그인한 사용자\n      loading: true,         // 로딩 상태\n      isEditing: false,      // 게시글 수정 모드\n      editedTitle: '',       // 수정 중인 제목\n      editedContent: '',     // 수정 중인 내용\n      comments: [],          // 댓글 리스트\n      newComment: '',        // 새 댓글 내용\n      editingCommentId: null,// 수정 중인 댓글 ID\n      editingContent: '',    // 수정 중인 댓글 내용\n      sortOrder: 'latest',   // 댓글 정렬 기준\n      editedImage: null, // 새 이미지 파일 저장 변수 추가\n    };\n  },\n  computed: {\n    // 현재 게시글 작성자인지 판단\n    isAuthor() {\n      return this.currentUser?.nickname === this.post?.author;\n    },\n    // 정렬된 댓글 목록\n    sortedComments() {\n      return [...this.comments].sort((a, b) => {\n        if (this.sortOrder === 'latest') {\n          return new Date(b.createdAt) - new Date(a.createdAt); // 최신순\n        } else if (this.sortOrder === 'oldest') {\n          return new Date(a.createdAt) - new Date(b.createdAt); // 오래된순\n        } else if (this.sortOrder === 'likes') {\n          return (b.likes || 0) - (a.likes || 0);               // 좋아요순\n        }\n      });\n    },\n  },\n  methods: {\n    // 초기 데이터 로드\n    async loadData() {\n      this.loading = true;\n      try {\n        // 게시글, 댓글, 유저 정보 한번에 불러오기\n        await Promise.all([this.fetchPost(), this.fetchComments(), this.fetchCurrentUser()]);\n      } catch (error) {\n        console.error('데이터를 가져오는 중 오류 발생:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 게시글 가져오기\n    async fetchPost() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, {\n          withCredentials: true\n        });\n        this.post = response.data;\n        this.editedTitle = this.post.title;\n        this.editedContent = this.post.content;\n      } catch (error) {\n        console.error('게시글을 가져오는 중 오류 발생:', error);\n        this.post = null;\n      }\n    },\n    // 댓글 가져오기\n    async fetchComments() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board/${this.id}/comments`, {\n          withCredentials: true\n        });\n        this.comments = response.data;\n      } catch (error) {\n        console.error('댓글을 가져오는 중 오류 발생:', error);\n      }\n    },\n    // 현재 로그인 유저 가져오기\n    async fetchCurrentUser() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          withCredentials: true\n        });\n        if (response.data.loggedIn) {\n          this.currentUser = response.data.user;\n        }\n      } catch (error) {\n        console.error('현재 사용자 정보를 가져오는 데 실패했습니다:', error);\n        this.currentUser = null;\n      }\n    },\n    // 날짜 포맷\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n    },\n    // 게시글 수정 진입\n    enterEditMode() {\n      this.isEditing = true;\n    },\n    // 게시글 수정 취소\n    cancelEdit() {\n      this.isEditing = false;\n      // 원래 값으로 복구\n      this.editedTitle = this.post.title;\n      this.editedContent = this.post.content;\n    },\n    // 게시글 수정 완료\n    async updatePost() {\n      try {\n        if (this.editedImage) {\n          // 파일이 첨부된 경우, FormData를 사용하여 전송\n          const formData = new FormData();\n          formData.append('title', this.editedTitle);\n          formData.append('content', this.editedContent);\n          formData.append('image', this.editedImage);\n          await axios.put(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, formData, {\n            withCredentials: true,\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n        } else {\n          // 파일 없이 텍스트만 수정하는 경우\n          await axios.put(\n            `${process.env.VUE_APP_API_URL}/api/board/${this.id}`,\n            { title: this.editedTitle, content: this.editedContent },\n            { withCredentials: true }\n          );\n        }\n        // 수정이 완료된 후 최신 데이터를 서버에서 다시 불러와 화면 갱신\n        await this.fetchPost();\n        this.isEditing = false;\n        alert('게시글이 수정되었습니다.');\n      } catch (error) {\n        console.error('게시글 수정 중 오류 발생:', error);\n        alert('게시글 수정에 실패했습니다.');\n      }\n    },\n    // 게시글 삭제\n    async deletePost() {\n      try {\n        await axios.delete(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, {\n          withCredentials: true\n        });\n        alert('게시글이 삭제되었습니다.');\n        this.$router.push('/board');\n      } catch (error) {\n        console.error('게시글 삭제 중 오류 발생:', error);\n      }\n    },\n    // 게시글 좋아요\n    async likePost() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        const response = await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/${this.id}/like`,\n          { action: 'like' },\n          { withCredentials: true }\n        );\n        this.post.likes = response.data.likes;\n        this.post.dislikes = response.data.dislikes;\n      } catch (error) {\n        console.error('좋아요 처리 중 오류 발생:', error);\n        alert('좋아요 처리에 실패했습니다.');\n      }\n    },\n    // 게시글 싫어요\n    async dislikePost() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        const response = await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/${this.id}/like`,\n          { action: 'dislike' },\n          { withCredentials: true }\n        );\n        this.post.likes = response.data.likes;\n        this.post.dislikes = response.data.dislikes;\n      } catch (error) {\n        console.error('싫어요 처리 중 오류 발생:', error);\n        alert('싫어요 처리에 실패했습니다.');\n      }\n    },\n    // 댓글 작성\n    async submitComment() {\n      if (!this.newComment.trim()) {\n        alert('댓글 내용을 입력해주세요.');\n        return;\n      }\n      try {\n        const response = await axios.post(\n          `${process.env.VUE_APP_API_URL}/api/board/${this.id}/comments`,\n          { content: this.newComment },\n          { withCredentials: true }\n        );\n        this.comments.push(response.data);\n        this.newComment = '';\n      } catch (error) {\n        console.error('댓글 작성 중 오류 발생:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    // 댓글 수정 시작\n    startEditingComment(commentId, content) {\n      this.editingCommentId = commentId;\n      this.editingContent = content;\n    },\n    // 댓글 수정 취소\n    cancelEditing() {\n      this.editingCommentId = null;\n      this.editingContent = '';\n    },\n    // 댓글 수정 완료\n    async saveEditedComment(commentId) {\n      if (!this.editingContent.trim()) {\n        alert('수정할 내용을 입력해주세요.');\n        return;\n      }\n      try {\n        await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}`,\n          { content: this.editingContent },\n          { withCredentials: true }\n        );\n        const comment = this.comments.find(c => c._id === commentId);\n        if (comment) {\n          comment.content = this.editingContent;\n        }\n        this.cancelEditing();\n        alert('댓글이 수정되었습니다.');\n      } catch (error) {\n        console.error('댓글 수정 중 오류 발생:', error);\n        alert('댓글 수정에 실패했습니다.');\n      }\n    },\n    // 댓글 삭제\n    async deleteComment(commentId) {\n      try {\n        await axios.delete(`${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}`, {\n          withCredentials: true\n        });\n        this.comments = this.comments.filter(comment => comment._id !== commentId);\n        alert('댓글이 삭제되었습니다.');\n      } catch (error) {\n        console.error('댓글 삭제 중 오류 발생:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    // 댓글 좋아요\n    async likeComment(commentId) {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}/like`,\n          { action: 'like' },\n          { withCredentials: true }\n        );\n        await this.fetchComments(); // 갱신\n      } catch (error) {\n        console.error('댓글 좋아요 처리 중 오류 발생:', error);\n      }\n    },\n    // 댓글 싫어요\n    async dislikeComment(commentId) {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}/like`,\n          { action: 'dislike' },\n          { withCredentials: true }\n        );\n        await this.fetchComments(); // 갱신\n      } catch (error) {\n        console.error('댓글 싫어요 처리 중 오류 발생:', error);\n      }\n    },\n    // 댓글 정렬 이벤트 (옵션 변경 시 콘솔 로그)\n    sortComments() {\n      console.log(`정렬 기준이 ${this.sortOrder}로 변경되었습니다.`);\n    },\n    // 조회수 증가\n    async incrementViews() {\n      try {\n        const response = await axios.post(\n          `${process.env.VUE_APP_API_URL}/api/board/${this.id}/views`,\n          {},\n          { withCredentials: true }\n        );\n        if (response.status === 200) {\n          this.post.views += 1;\n        }\n      } catch (error) {\n        console.error('조회수 증가 요청 중 오류 발생:', error);\n      }\n    },\n    // 개행 문자 -> <br> 치환\n    convertNewLinesToBreaks(text) {\n      return text.replace(/\\n/g, '<br>');\n    },\n    handleEditImageUpload(event) {\n      this.editedImage = event.target.files[0];\n    },\n  },\n  created() {\n    // 컴포넌트 생성 시 데이터 로드 -> 조회수 증가\n    this.loadData().then(() => {\n      this.incrementViews();\n    });\n  },\n};\n</script>\n\n<style scoped>\n/* 최상위 컨테이너 */\n.post-container {\n  max-width: 700px;\n  margin: 40px auto;\n  padding: 20px;\n  background: #222;\n  border-radius: 8px;\n  color: white;\n}\n\n/* 게시글 카드 전체 래퍼 */\n.post-card {\n  background: #333;\n  padding: 20px;\n  border-radius: 10px;\n  position: relative;\n}\n\n/* 게시글 상단의 수정/삭제 버튼 (작성자 전용) */\n.edit-actions {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  display: flex;\n  gap: 8px;\n}\n\n.edit-btn,\n.delete-btn {\n  border: 1px solid gray;\n  background: transparent;\n  color: gray;\n  padding: 5px 12px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.edit-btn:hover,\n.delete-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* 게시글 헤더 */\n.post-header h1 {\n  margin-bottom: 5px;\n}\n\n.post-meta {\n  font-size: 14px;\n  color: #bbb;\n  display: flex;\n  gap: 10px;\n}\n\n/* 게시글 본문 */\n.post-content {\n  margin: 20px 0;\n  line-height: 1.6;\n}\n\n/* 좋아요/싫어요 버튼 영역 */\n.action-buttons {\n  margin-top: 10px;\n}\n\n.like-btn {\n  border: 1px solid gray;\n  background: transparent;\n  color: white;\n  padding: 5px 12px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.like-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* 수정 폼 */\n.edit-form {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n  /* 내부 요소 수평 가운데 정렬 */\n  justify-content: center;\n  /* 수직 정렬 (선택) */\n  margin: 0 auto;\n  /* edit-form 자체를 가운데로 */\n  max-width: 600px;\n  /* 전체 입력 폼 너비 제한 */\n  width: 100%;\n}\n\n.input-field,\n.textarea-field {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid gray;\n  background: transparent;\n  color: white;\n  border-radius: 5px;\n}\n\n.textarea-field {\n  height: 120px;\n  resize: none;\n}\n\n.form-buttons {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n}\n\n.save-btn,\n.cancel-btn {\n  border: 1px solid gray;\n  background: transparent;\n  color: white;\n  padding: 8px 12px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.save-btn:hover,\n.cancel-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* 댓글 섹션 */\n.comments-section {\n  margin-top: 35px;\n}\n\n.comment-input {\n  margin-bottom: 15px;\n}\n\n.comment-input textarea {\n  width: 100%;\n  padding: 8px;\n  border-radius: 5px;\n  background: #555;\n  color: white;\n  border: none;\n  height: 60px;\n  margin-bottom: 8px;\n}\n\n.comment-submit {\n  background: transparent;\n  border: 1px solid gray;\n  color: white;\n  padding: 6px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.comment-submit:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* 댓글 목록 */\n.comment-list {\n  list-style: none;\n  padding: 0;\n}\n\n.comment-item {\n  padding: 8px 12px;\n  background: #444;\n  border-radius: 5px;\n  margin-bottom: 10px;\n  font-size: 13px;\n  border: 1px solid #666;\n}\n\n.comment-header {\n  font-weight: bold;\n  margin-bottom: 4px;\n}\n\n.comment-header span {\n  color: #bbb;\n  margin-left: 4px;\n}\n\n.comment-actions {\n  margin-top: 8px;\n}\n\n/* 로딩/에러 상태 */\n.loading,\n.error {\n  text-align: center;\n  color: white;\n}\n\n.post-image {\n  margin: 20px 0;\n  text-align: center;\n}\n\n.post-image img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 8px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}