{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"post-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"error\"\n};\nconst _hoisted_4 = {\n  key: 2,\n  class: \"post-card\"\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  class: \"form-buttons\"\n};\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = {\n  class: \"post-header\"\n};\nconst _hoisted_9 = {\n  class: \"post-meta\"\n};\nconst _hoisted_10 = [\"innerHTML\"];\nconst _hoisted_11 = {\n  key: 0,\n  class: \"post-image\"\n};\nconst _hoisted_12 = [\"src\"];\nconst _hoisted_13 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_14 = {\n  key: 1,\n  class: \"edit-actions\"\n};\nconst _hoisted_15 = {\n  key: 2,\n  class: \"comments-section\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  style: {\n    \"margin-bottom\": \"15px\"\n  }\n};\nconst _hoisted_17 = {\n  key: 1,\n  class: \"comment-input\"\n};\nconst _hoisted_18 = {\n  class: \"comment-list\"\n};\nconst _hoisted_19 = {\n  class: \"comment-header\"\n};\nconst _hoisted_20 = {\n  key: 0\n};\nconst _hoisted_21 = {\n  class: \"comment-actions\"\n};\nconst _hoisted_22 = [\"onClick\"];\nconst _hoisted_23 = {\n  key: 1\n};\nconst _hoisted_24 = [\"innerHTML\"];\nconst _hoisted_25 = {\n  class: \"comment-actions\"\n};\nconst _hoisted_26 = [\"onClick\"];\nconst _hoisted_27 = [\"onClick\"];\nconst _hoisted_28 = {\n  key: 0,\n  style: {\n    \"display\": \"inline-block\",\n    \"margin-left\": \"10px\"\n  }\n};\nconst _hoisted_29 = [\"onClick\"];\nconst _hoisted_30 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[15] || (_cache[15] = [_createElementVNode(\"h2\", null, \"로딩 중...\", -1)]))) : !$data.post ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[16] || (_cache[16] = [_createElementVNode(\"h2\", null, \"게시글을 불러오지 못했습니다.\", -1)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [$data.isEditing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[18] || (_cache[18] = _createElementVNode(\"h2\", null, \"게시글 수정\", -1)), _createElementVNode(\"form\", {\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.updatePost && $options.updatePost(...args), [\"prevent\"])),\n    class: \"edit-form\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.editedTitle = $event),\n    type: \"text\",\n    placeholder: \"제목을 입력하세요\",\n    required: \"\",\n    class: \"input-field\"\n  }, null, 512), [[_vModelText, $data.editedTitle]]), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.editedContent = $event),\n    placeholder: \"내용을 입력하세요\",\n    required: \"\",\n    class: \"textarea-field\"\n  }, null, 512), [[_vModelText, $data.editedContent]]), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[2] || (_cache[2] = (...args) => $options.handleEditImageUpload && $options.handleEditImageUpload(...args)),\n    accept: \"image/*\"\n  }, null, 32), _createElementVNode(\"div\", _hoisted_6, [_cache[17] || (_cache[17] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"save-btn\"\n  }, \"수정 완료\", -1)), _createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.cancelEdit && $options.cancelEdit(...args)),\n    class: \"cancel-btn\"\n  }, \"취소\")])], 32)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"h1\", null, _toDisplayString($data.post.title), 1), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"span\", null, [_cache[19] || (_cache[19] = _createTextVNode(\"작성자: \")), _createElementVNode(\"strong\", null, _toDisplayString($data.post.author || '익명'), 1)]), _createElementVNode(\"span\", null, \"작성일: \" + _toDisplayString($options.formatDate($data.post.createdAt)), 1), _createElementVNode(\"span\", null, \"조회수: \" + _toDisplayString($data.post.views || 0), 1)])]), _createElementVNode(\"p\", {\n    class: \"post-content\",\n    innerHTML: $options.convertNewLinesToBreaks($data.post.content)\n  }, null, 8, _hoisted_10), $data.post.imageUrl ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createElementVNode(\"img\", {\n    src: `${_ctx.process.env.VUE_APP_API_URL}${$data.post.imageUrl}?t=${new Date().getTime()}`,\n    alt: \"게시글 이미지\"\n  }, null, 8, _hoisted_12)])) : _createCommentVNode(\"\", true), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.likePost && $options.likePost(...args)),\n    class: \"like-btn\"\n  }, \" 👍 좋아요 (\" + _toDisplayString($data.post.likes) + \") \", 1), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.dislikePost && $options.dislikePost(...args)),\n    class: \"like-btn\",\n    style: {\n      \"margin-left\": \"8px\"\n    }\n  }, \" 👎 싫어요 (\" + _toDisplayString($data.post.dislikes) + \") \", 1)]), $options.isAuthor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.enterEditMode && $options.enterEditMode(...args)),\n    class: \"edit-btn\"\n  }, \"✏️ 수정\"), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.deletePost && $options.deletePost(...args)),\n    class: \"delete-btn\"\n  }, \"🗑 삭제\")])) : _createCommentVNode(\"\", true)])), !$data.isEditing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_createElementVNode(\"h3\", null, \"댓글 (\" + _toDisplayString($data.comments.length) + \")\", 1), $data.comments.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_cache[21] || (_cache[21] = _createElementVNode(\"label\", {\n    for: \"comment-sort\",\n    style: {\n      \"margin-right\": \"6px\"\n    }\n  }, \"정렬 기준:\", -1)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"comment-sort\",\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $data.sortOrder = $event),\n    onChange: _cache[10] || (_cache[10] = (...args) => $options.sortComments && $options.sortComments(...args)),\n    style: {\n      \"border-radius\": \"5px\",\n      \"background\": \"#444\",\n      \"color\": \"white\",\n      \"border\": \"none\",\n      \"padding\": \"4px 8px\"\n    }\n  }, _cache[20] || (_cache[20] = [_createElementVNode(\"option\", {\n    value: \"latest\"\n  }, \"최신순\", -1), _createElementVNode(\"option\", {\n    value: \"oldest\"\n  }, \"오래된순\", -1), _createElementVNode(\"option\", {\n    value: \"likes\"\n  }, \"좋아요순\", -1)]), 544), [[_vModelSelect, $data.sortOrder]])])) : _createCommentVNode(\"\", true), $data.currentUser && !$data.isEditing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[11] || (_cache[11] = $event => $data.newComment = $event),\n    placeholder: \"댓글을 입력하세요\"\n  }, null, 512), [[_vModelText, $data.newComment]]), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = (...args) => $options.submitComment && $options.submitComment(...args)),\n    class: \"comment-submit\"\n  }, \"댓글 작성\")])) : _createCommentVNode(\"\", true), _createElementVNode(\"ul\", _hoisted_18, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.sortedComments, comment => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: comment._id,\n      class: \"comment-item\"\n    }, [_createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"strong\", null, _toDisplayString(comment.nickname), 1), _createElementVNode(\"span\", null, \" | \" + _toDisplayString($options.formatDate(comment.createdAt)), 1)]), $data.editingCommentId === comment._id ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_withDirectives(_createElementVNode(\"textarea\", {\n      \"onUpdate:modelValue\": _cache[13] || (_cache[13] = $event => $data.editingContent = $event),\n      class: \"textarea-field\"\n    }, null, 512), [[_vModelText, $data.editingContent]]), _createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"button\", {\n      onClick: $event => $options.saveEditedComment(comment._id),\n      class: \"save-btn\"\n    }, \" 저장 \", 8, _hoisted_22), _createElementVNode(\"button\", {\n      onClick: _cache[14] || (_cache[14] = (...args) => $options.cancelEditing && $options.cancelEditing(...args)),\n      class: \"cancel-btn\"\n    }, \"취소\")])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [_createElementVNode(\"p\", {\n      innerHTML: $options.convertNewLinesToBreaks(comment.content)\n    }, null, 8, _hoisted_24), _createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"button\", {\n      onClick: $event => $options.likeComment(comment._id),\n      class: \"like-btn\"\n    }, \" 👍 (\" + _toDisplayString(comment.likes || 0) + \") \", 9, _hoisted_26), _createElementVNode(\"button\", {\n      onClick: $event => $options.dislikeComment(comment._id),\n      class: \"like-btn\",\n      style: {\n        \"margin-left\": \"8px\"\n      }\n    }, \" 👎 (\" + _toDisplayString(comment.dislikes || 0) + \") \", 9, _hoisted_27), $data.currentUser?.userid === comment.userId ? (_openBlock(), _createElementBlock(\"div\", _hoisted_28, [_createElementVNode(\"button\", {\n      onClick: $event => $options.startEditingComment(comment._id, comment.content),\n      class: \"edit-btn\"\n    }, \"✏️ 수정\", 8, _hoisted_29), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteComment(comment._id),\n      class: \"delete-btn\"\n    }, \"🗑 삭제\", 8, _hoisted_30)])) : _createCommentVNode(\"\", true)])]))]);\n  }), 128))])])) : _createCommentVNode(\"\", true)]))]);\n}","map":{"version":3,"names":["class","key","style","_createElementBlock","_hoisted_1","$data","loading","_hoisted_2","_cache","_createElementVNode","post","_hoisted_3","_hoisted_4","isEditing","_hoisted_5","onSubmit","_withModifiers","args","$options","updatePost","$event","editedTitle","type","placeholder","required","editedContent","onChange","handleEditImageUpload","accept","_hoisted_6","onClick","cancelEdit","_hoisted_7","_hoisted_8","_toDisplayString","title","_hoisted_9","_createTextVNode","author","formatDate","createdAt","views","innerHTML","convertNewLinesToBreaks","content","_hoisted_10","imageUrl","_hoisted_11","src","_ctx","process","env","VUE_APP_API_URL","Date","getTime","alt","_hoisted_12","_createCommentVNode","_hoisted_13","likePost","likes","dislikePost","dislikes","isAuthor","_hoisted_14","enterEditMode","deletePost","_hoisted_15","comments","length","_hoisted_16","for","id","sortOrder","sortComments","value","currentUser","_hoisted_17","newComment","submitComment","_hoisted_18","_Fragment","_renderList","sortedComments","comment","_id","_hoisted_19","nickname","editingCommentId","_hoisted_20","editingContent","_hoisted_21","saveEditedComment","_hoisted_22","cancelEditing","_hoisted_23","_hoisted_24","_hoisted_25","likeComment","_hoisted_26","dislikeComment","_hoisted_27","userid","userId","_hoisted_28","startEditingComment","_hoisted_29","deleteComment","_hoisted_30"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/components/BoardDetail.vue"],"sourcesContent":["<template>\n  <div class=\"post-container\">\n    <!-- [1] 게시글 로드 중/에러 상태 -->\n    <div v-if=\"loading\" class=\"loading\">\n      <h2>로딩 중...</h2>\n    </div>\n    <div v-else-if=\"!post\" class=\"error\">\n      <h2>게시글을 불러오지 못했습니다.</h2>\n    </div>\n\n    <!-- [2] 게시글이 로드되었을 때 -->\n    <div v-else class=\"post-card\">\n      <!-- [2-1] 게시글 수정 모드 -->\n      <div v-if=\"isEditing\">\n        <h2>게시글 수정</h2>\n        <form @submit.prevent=\"updatePost\" class=\"edit-form\">\n          <input v-model=\"editedTitle\" type=\"text\" placeholder=\"제목을 입력하세요\" required class=\"input-field\" />\n          <textarea v-model=\"editedContent\" placeholder=\"내용을 입력하세요\" required class=\"textarea-field\"></textarea>\n\n          <!-- 파일 첨부 입력 추가 -->\n          <input type=\"file\" @change=\"handleEditImageUpload\" accept=\"image/*\" />\n\n          <div class=\"form-buttons\">\n            <button type=\"submit\" class=\"save-btn\">수정 완료</button>\n            <button type=\"button\" @click=\"cancelEdit\" class=\"cancel-btn\">취소</button>\n          </div>\n        </form>\n      </div>\n\n      <!-- [2-2] 게시글 일반 보기 모드 -->\n      <div v-else>\n        <!-- 제목/작성자/조회수 영역 -->\n        <div class=\"post-header\">\n          <h1>{{ post.title }}</h1>\n          <div class=\"post-meta\">\n            <span>작성자: <strong>{{ post.author || '익명' }}</strong></span>\n            <span>작성일: {{ formatDate(post.createdAt) }}</span>\n            <span>조회수: {{ post.views || 0 }}</span>\n          </div>\n        </div>\n\n        <!-- 게시글 본문 -->\n        <p class=\"post-content\" v-html=\"convertNewLinesToBreaks(post.content)\"></p>\n\n        <!-- 이미지가 있을 경우 보여주기 -->\n        <div v-if=\"post.imageUrl\" class=\"post-image\">\n          <img :src=\"`${process.env.VUE_APP_API_URL}${post.imageUrl}?t=${new Date().getTime()}`\" alt=\"게시글 이미지\" />\n        </div>\n\n        <!-- 좋아요/싫어요 -->\n        <div class=\"action-buttons\">\n          <button @click=\"likePost\" class=\"like-btn\">\n            👍 좋아요 ({{ post.likes }})\n          </button>\n          <button @click=\"dislikePost\" class=\"like-btn\" style=\"margin-left:8px;\">\n            👎 싫어요 ({{ post.dislikes }})\n          </button>\n        </div>\n\n        <!-- 게시글 수정/삭제 버튼 (글 작성자만) -->\n        <div v-if=\"isAuthor\" class=\"edit-actions\">\n          <button @click=\"enterEditMode\" class=\"edit-btn\">✏️ 수정</button>\n          <button @click=\"deletePost\" class=\"delete-btn\">🗑 삭제</button>\n        </div>\n      </div>\n\n      <!-- [3] 댓글 섹션 -->\n      <div class=\"comments-section\" v-if=\"!isEditing\">\n        <h3>댓글 ({{ comments.length }})</h3>\n\n        <!-- 댓글 정렬 옵션 (댓글이 1개 이상일 때만 표시) -->\n        <div v-if=\"comments.length > 0\" style=\"margin-bottom: 15px;\">\n          <label for=\"comment-sort\" style=\"margin-right:6px;\">정렬 기준:</label>\n          <select id=\"comment-sort\" v-model=\"sortOrder\" @change=\"sortComments\"\n            style=\"border-radius:5px; background:#444; color:white; border:none; padding:4px 8px;\">\n            <option value=\"latest\">최신순</option>\n            <option value=\"oldest\">오래된순</option>\n            <option value=\"likes\">좋아요순</option>\n          </select>\n        </div>\n\n        <!-- 댓글 작성 영역 (로그인 유저 & 수정 중 아닐 때만 보임) -->\n        <div v-if=\"currentUser && !isEditing\" class=\"comment-input\">\n          <textarea v-model=\"newComment\" placeholder=\"댓글을 입력하세요\"></textarea>\n          <button @click=\"submitComment\" class=\"comment-submit\">댓글 작성</button>\n        </div>\n\n        <!-- 댓글 리스트 -->\n        <ul class=\"comment-list\">\n          <li v-for=\"comment in sortedComments\" :key=\"comment._id\" class=\"comment-item\">\n            <div class=\"comment-header\">\n              <strong>{{ comment.nickname }}</strong>\n              <span> | {{ formatDate(comment.createdAt) }}</span>\n            </div>\n\n            <!-- 댓글 수정 모드 -->\n            <div v-if=\"editingCommentId === comment._id\">\n              <textarea v-model=\"editingContent\" class=\"textarea-field\"></textarea>\n              <div class=\"comment-actions\">\n                <button @click=\"saveEditedComment(comment._id)\" class=\"save-btn\">\n                  저장\n                </button>\n                <button @click=\"cancelEditing\" class=\"cancel-btn\">취소</button>\n              </div>\n            </div>\n\n            <!-- 댓글 보기 모드 -->\n            <div v-else>\n              <p v-html=\"convertNewLinesToBreaks(comment.content)\"></p>\n              <div class=\"comment-actions\">\n                <!-- 좋아요/싫어요 -->\n                <button @click=\"likeComment(comment._id)\" class=\"like-btn\">\n                  👍 ({{ comment.likes || 0 }})\n                </button>\n                <button @click=\"dislikeComment(comment._id)\" class=\"like-btn\" style=\"margin-left:8px;\">\n                  👎 ({{ comment.dislikes || 0 }})\n                </button>\n\n                <!-- 댓글 수정/삭제 버튼 (작성자만 노출) -->\n                <div v-if=\"currentUser?.userid === comment.userId\" style=\"display:inline-block; margin-left:10px;\">\n                  <button @click=\"startEditingComment(comment._id, comment.content)\" class=\"edit-btn\">✏️ 수정</button>\n                  <button @click=\"deleteComment(comment._id)\" class=\"delete-btn\">🗑 삭제</button>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: ['id'], // 라우터 params로 받은 게시글 ID\n  data() {\n    return {\n      post: null,            // 게시글 데이터\n      currentUser: null,     // 현재 로그인한 사용자\n      loading: true,         // 로딩 상태\n      isEditing: false,      // 게시글 수정 모드\n      editedTitle: '',       // 수정 중인 제목\n      editedContent: '',     // 수정 중인 내용\n      comments: [],          // 댓글 리스트\n      newComment: '',        // 새 댓글 내용\n      editingCommentId: null,// 수정 중인 댓글 ID\n      editingContent: '',    // 수정 중인 댓글 내용\n      sortOrder: 'latest',   // 댓글 정렬 기준\n      editedImage: null, // 새 이미지 파일 저장 변수 추가\n    };\n  },\n  computed: {\n    // 현재 게시글 작성자인지 판단\n    isAuthor() {\n      return this.currentUser?.nickname === this.post?.author;\n    },\n    // 정렬된 댓글 목록\n    sortedComments() {\n      return [...this.comments].sort((a, b) => {\n        if (this.sortOrder === 'latest') {\n          return new Date(b.createdAt) - new Date(a.createdAt); // 최신순\n        } else if (this.sortOrder === 'oldest') {\n          return new Date(a.createdAt) - new Date(b.createdAt); // 오래된순\n        } else if (this.sortOrder === 'likes') {\n          return (b.likes || 0) - (a.likes || 0);               // 좋아요순\n        }\n      });\n    },\n  },\n  methods: {\n    // 초기 데이터 로드\n    async loadData() {\n      this.loading = true;\n      try {\n        // 게시글, 댓글, 유저 정보 한번에 불러오기\n        await Promise.all([this.fetchPost(), this.fetchComments(), this.fetchCurrentUser()]);\n      } catch (error) {\n        console.error('데이터를 가져오는 중 오류 발생:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 게시글 가져오기\n    async fetchPost() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, {\n          withCredentials: true\n        });\n        this.post = response.data;\n        this.editedTitle = this.post.title;\n        this.editedContent = this.post.content;\n      } catch (error) {\n        console.error('게시글을 가져오는 중 오류 발생:', error);\n        this.post = null;\n      }\n    },\n    // 댓글 가져오기\n    async fetchComments() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board/${this.id}/comments`, {\n          withCredentials: true\n        });\n        this.comments = response.data;\n      } catch (error) {\n        console.error('댓글을 가져오는 중 오류 발생:', error);\n      }\n    },\n    // 현재 로그인 유저 가져오기\n    async fetchCurrentUser() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          withCredentials: true\n        });\n        if (response.data.loggedIn) {\n          this.currentUser = response.data.user;\n        }\n      } catch (error) {\n        console.error('현재 사용자 정보를 가져오는 데 실패했습니다:', error);\n        this.currentUser = null;\n      }\n    },\n    // 날짜 포맷\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n    },\n    // 게시글 수정 진입\n    enterEditMode() {\n      this.isEditing = true;\n    },\n    // 게시글 수정 취소\n    cancelEdit() {\n      this.isEditing = false;\n      // 원래 값으로 복구\n      this.editedTitle = this.post.title;\n      this.editedContent = this.post.content;\n    },\n    // 게시글 수정 완료\n    async updatePost() {\n      try {\n        if (this.editedImage) {\n          // 파일이 첨부된 경우, FormData를 사용하여 전송\n          const formData = new FormData();\n          formData.append('title', this.editedTitle);\n          formData.append('content', this.editedContent);\n          formData.append('image', this.editedImage);\n          await axios.put(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, formData, {\n            withCredentials: true,\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n        } else {\n          // 파일 없이 텍스트만 수정하는 경우\n          await axios.put(\n            `${process.env.VUE_APP_API_URL}/api/board/${this.id}`,\n            { title: this.editedTitle, content: this.editedContent },\n            { withCredentials: true }\n          );\n        }\n        // 수정이 완료된 후 최신 데이터를 서버에서 다시 불러와 화면 갱신\n        await this.fetchPost();\n        this.isEditing = false;\n        alert('게시글이 수정되었습니다.');\n      } catch (error) {\n        console.error('게시글 수정 중 오류 발생:', error);\n        alert('게시글 수정에 실패했습니다.');\n      }\n    },\n    // 게시글 삭제\n    async deletePost() {\n      try {\n        await axios.delete(`${process.env.VUE_APP_API_URL}/api/board/${this.id}`, {\n          withCredentials: true\n        });\n        alert('게시글이 삭제되었습니다.');\n        this.$router.push('/board');\n      } catch (error) {\n        console.error('게시글 삭제 중 오류 발생:', error);\n      }\n    },\n    // 게시글 좋아요\n    async likePost() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        const response = await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/${this.id}/like`,\n          { action: 'like' },\n          { withCredentials: true }\n        );\n        this.post.likes = response.data.likes;\n        this.post.dislikes = response.data.dislikes;\n      } catch (error) {\n        console.error('좋아요 처리 중 오류 발생:', error);\n        alert('좋아요 처리에 실패했습니다.');\n      }\n    },\n    // 게시글 싫어요\n    async dislikePost() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        const response = await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/${this.id}/like`,\n          { action: 'dislike' },\n          { withCredentials: true }\n        );\n        this.post.likes = response.data.likes;\n        this.post.dislikes = response.data.dislikes;\n      } catch (error) {\n        console.error('싫어요 처리 중 오류 발생:', error);\n        alert('싫어요 처리에 실패했습니다.');\n      }\n    },\n    // 댓글 작성\n    async submitComment() {\n      if (!this.newComment.trim()) {\n        alert('댓글 내용을 입력해주세요.');\n        return;\n      }\n      try {\n        const response = await axios.post(\n          `${process.env.VUE_APP_API_URL}/api/board/${this.id}/comments`,\n          { content: this.newComment },\n          { withCredentials: true }\n        );\n        this.comments.push(response.data);\n        this.newComment = '';\n      } catch (error) {\n        console.error('댓글 작성 중 오류 발생:', error);\n        alert('댓글 작성에 실패했습니다.');\n      }\n    },\n    // 댓글 수정 시작\n    startEditingComment(commentId, content) {\n      this.editingCommentId = commentId;\n      this.editingContent = content;\n    },\n    // 댓글 수정 취소\n    cancelEditing() {\n      this.editingCommentId = null;\n      this.editingContent = '';\n    },\n    // 댓글 수정 완료\n    async saveEditedComment(commentId) {\n      if (!this.editingContent.trim()) {\n        alert('수정할 내용을 입력해주세요.');\n        return;\n      }\n      try {\n        await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}`,\n          { content: this.editingContent },\n          { withCredentials: true }\n        );\n        const comment = this.comments.find(c => c._id === commentId);\n        if (comment) {\n          comment.content = this.editingContent;\n        }\n        this.cancelEditing();\n        alert('댓글이 수정되었습니다.');\n      } catch (error) {\n        console.error('댓글 수정 중 오류 발생:', error);\n        alert('댓글 수정에 실패했습니다.');\n      }\n    },\n    // 댓글 삭제\n    async deleteComment(commentId) {\n      try {\n        await axios.delete(`${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}`, {\n          withCredentials: true\n        });\n        this.comments = this.comments.filter(comment => comment._id !== commentId);\n        alert('댓글이 삭제되었습니다.');\n      } catch (error) {\n        console.error('댓글 삭제 중 오류 발생:', error);\n        alert('댓글 삭제에 실패했습니다.');\n      }\n    },\n    // 댓글 좋아요\n    async likeComment(commentId) {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}/like`,\n          { action: 'like' },\n          { withCredentials: true }\n        );\n        await this.fetchComments(); // 갱신\n      } catch (error) {\n        console.error('댓글 좋아요 처리 중 오류 발생:', error);\n      }\n    },\n    // 댓글 싫어요\n    async dislikeComment(commentId) {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      try {\n        await axios.put(\n          `${process.env.VUE_APP_API_URL}/api/board/comments/${commentId}/like`,\n          { action: 'dislike' },\n          { withCredentials: true }\n        );\n        await this.fetchComments(); // 갱신\n      } catch (error) {\n        console.error('댓글 싫어요 처리 중 오류 발생:', error);\n      }\n    },\n    // 댓글 정렬 이벤트 (옵션 변경 시 콘솔 로그)\n    sortComments() {\n      console.log(`정렬 기준이 ${this.sortOrder}로 변경되었습니다.`);\n    },\n    // 조회수 증가\n    async incrementViews() {\n      try {\n        const response = await axios.post(\n          `${process.env.VUE_APP_API_URL}/api/board/${this.id}/views`,\n          {},\n          { withCredentials: true }\n        );\n        if (response.status === 200) {\n          this.post.views += 1;\n        }\n      } catch (error) {\n        console.error('조회수 증가 요청 중 오류 발생:', error);\n      }\n    },\n    // 개행 문자 -> <br> 치환\n    convertNewLinesToBreaks(text) {\n      return text.replace(/\\n/g, '<br>');\n    },\n    handleEditImageUpload(event) {\n      this.editedImage = event.target.files[0];\n    },\n  },\n  created() {\n    // 컴포넌트 생성 시 데이터 로드 -> 조회수 증가\n    this.loadData().then(() => {\n      this.incrementViews();\n    });\n  },\n};\n</script>\n\n<style scoped>\n/* 최상위 컨테이너 */\n.post-container {\n  max-width: 700px;\n  margin: 40px auto;\n  padding: 20px;\n  background: #222;\n  border-radius: 8px;\n  color: white;\n}\n\n/* 게시글 카드 전체 래퍼 */\n.post-card {\n  background: #333;\n  padding: 20px;\n  border-radius: 10px;\n  position: relative;\n}\n\n/* 게시글 상단의 수정/삭제 버튼 (작성자 전용) */\n.edit-actions {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  display: flex;\n  gap: 8px;\n}\n\n.edit-btn,\n.delete-btn {\n  border: 1px solid gray;\n  background: transparent;\n  color: gray;\n  padding: 5px 12px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.edit-btn:hover,\n.delete-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* 게시글 헤더 */\n.post-header h1 {\n  margin-bottom: 5px;\n}\n\n.post-meta {\n  font-size: 14px;\n  color: #bbb;\n  display: flex;\n  gap: 10px;\n}\n\n/* 게시글 본문 */\n.post-content {\n  margin: 20px 0;\n  line-height: 1.6;\n}\n\n/* 좋아요/싫어요 버튼 영역 */\n.action-buttons {\n  margin-top: 10px;\n}\n\n.like-btn {\n  border: 1px solid gray;\n  background: transparent;\n  color: white;\n  padding: 5px 12px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.like-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* 수정 폼 */\n.edit-form {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n  /* 내부 요소 수평 가운데 정렬 */\n  justify-content: center;\n  /* 수직 정렬 (선택) */\n  margin: 0 auto;\n  /* edit-form 자체를 가운데로 */\n  max-width: 600px;\n  /* 전체 입력 폼 너비 제한 */\n  width: 100%;\n}\n\n.input-field,\n.textarea-field {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid gray;\n  background: transparent;\n  color: white;\n  border-radius: 5px;\n}\n\n.textarea-field {\n  height: 120px;\n  resize: none;\n}\n\n.form-buttons {\n  display: flex;\n  gap: 10px;\n  justify-content: flex-end;\n}\n\n.save-btn,\n.cancel-btn {\n  border: 1px solid gray;\n  background: transparent;\n  color: white;\n  padding: 8px 12px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.save-btn:hover,\n.cancel-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* 댓글 섹션 */\n.comments-section {\n  margin-top: 35px;\n}\n\n.comment-input {\n  margin-bottom: 15px;\n}\n\n.comment-input textarea {\n  width: 100%;\n  padding: 8px;\n  border-radius: 5px;\n  background: #555;\n  color: white;\n  border: none;\n  height: 60px;\n  margin-bottom: 8px;\n}\n\n.comment-submit {\n  background: transparent;\n  border: 1px solid gray;\n  color: white;\n  padding: 6px 10px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n.comment-submit:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* 댓글 목록 */\n.comment-list {\n  list-style: none;\n  padding: 0;\n}\n\n.comment-item {\n  padding: 8px 12px;\n  background: #444;\n  border-radius: 5px;\n  margin-bottom: 10px;\n  font-size: 13px;\n  border: 1px solid #666;\n}\n\n.comment-header {\n  font-weight: bold;\n  margin-bottom: 4px;\n}\n\n.comment-header span {\n  color: #bbb;\n  margin-left: 4px;\n}\n\n.comment-actions {\n  margin-top: 8px;\n}\n\n/* 로딩/에러 상태 */\n.loading,\n.error {\n  text-align: center;\n  color: white;\n}\n\n.post-image {\n  margin: 20px 0;\n  text-align: center;\n}\n\n.post-image img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 8px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}