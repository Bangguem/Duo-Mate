{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      posts: [],\n      // 게시글 목록\n      filteredPosts: [],\n      // 필터링된 게시글 목록\n      loading: true,\n      // 로딩 상태\n      error: false,\n      // 오류 상태\n      title: '',\n      // 게시글 제목\n      content: '',\n      // 게시글 내용\n      currentPage: 'board',\n      // 현재 페이지 상태 ('board', 'write')\n      currentUser: null,\n      // 현재 로그인한 사용자 정보\n      sortOrder: 'latest',\n      // 정렬 기준\n      searchQuery: '',\n      // 검색어\n      searchType: 'title',\n      // 검색 항목 (제목, 내용, 등록자명)\n      image: null // 추가\n    };\n  },\n  computed: {\n    // 검색된 게시글 목록을 기준으로 정렬된 게시글을 반환\n    sortedPosts() {\n      return [...this.filteredPosts].sort((a, b) => {\n        if (this.sortOrder === 'latest') {\n          return new Date(b.createdAt) - new Date(a.createdAt); // 최신순\n        } else if (this.sortOrder === 'oldest') {\n          return new Date(a.createdAt) - new Date(b.createdAt); // 오래된순\n        } else if (this.sortOrder === 'likes') {\n          return (b.likes || 0) - (a.likes || 0); // 좋아요순\n        } else if (this.sortOrder === 'views') {\n          return (b.views || 0) - (a.views || 0); // 조회수순\n        }\n      });\n    }\n  },\n  created() {\n    this.initData(); // 초기 데이터 로드\n    this.checkLoginStatus(); // 로그인 상태 확인\n  },\n  methods: {\n    handleImageUpload(event) {\n      this.image = event.target.files[0];\n    },\n    // 로그인 상태 확인\n    async checkLoginStatus() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          withCredentials: true\n        });\n        this.currentUser = response.data.user || null; // 로그인 사용자 정보\n      } catch (error) {\n        console.error('로그인 상태 확인 중 오류 발생:', error);\n        this.currentUser = null; // 로그아웃 상태\n      }\n    },\n    // 초기 데이터 로드\n    async initData() {\n      this.loading = true;\n      this.error = false;\n      try {\n        await this.fetchPosts();\n      } catch (error) {\n        console.error('초기 데이터를 가져오는 중 오류 발생:', error);\n        this.error = true;\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 게시글 목록 가져오기\n    async fetchPosts() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board`, {\n          withCredentials: true\n        });\n        this.posts = response.data;\n        this.filteredPosts = [...this.posts];\n      } catch (error) {\n        console.error('게시글을 가져오는 중 오류 발생:', error);\n        this.error = true;\n      }\n    },\n    // 게시글 검색\n    filterPosts() {\n      if (this.searchQuery.trim()) {\n        // 제목 검색\n        if (this.searchType === 'title') {\n          this.filteredPosts = this.posts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()));\n        }\n        // 내용 검색\n        else if (this.searchType === 'content') {\n          this.filteredPosts = this.posts.filter(post => post.content.toLowerCase().includes(this.searchQuery.toLowerCase()));\n        }\n        // 등록자명 검색\n        else if (this.searchType === 'author') {\n          this.filteredPosts = this.posts.filter(post => (post.author || '').toLowerCase().includes(this.searchQuery.toLowerCase()));\n        }\n      } else {\n        this.filteredPosts = [...this.posts]; // 검색어 없으면 원본 전체\n      }\n    },\n    // 게시글 작성\n    async submitPost() {\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n      try {\n        await axios.post(`${process.env.VUE_APP_API_URL}/api/board`, formData, {\n          withCredentials: true,\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.goToBoardPage();\n        this.initData();\n      } catch (error) {\n        console.error('게시글 작성 중 오류 발생:', error);\n      }\n    },\n    // 페이지 이동\n    goToBoardPage() {\n      this.currentPage = 'board';\n      this.title = '';\n      this.content = '';\n    },\n    goToWritePage() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      this.currentPage = 'write';\n    },\n    goToDetailPage(postId) {\n      this.$router.push({\n        name: 'BoardDetail',\n        params: {\n          id: postId\n        }\n      });\n    },\n    // 날짜 형식 변경\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString(undefined, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    // 검색 초기화\n    resetSearch() {\n      this.searchQuery = '';\n      this.filteredPosts = [...this.posts];\n    },\n    // 개행 문자 -> <br> 변환\n    convertNewLinesToBreaks(text) {\n      return text.replace(/\\n/g, '<br>');\n    }\n  }\n};","map":{"version":3,"names":["axios","data","posts","filteredPosts","loading","error","title","content","currentPage","currentUser","sortOrder","searchQuery","searchType","image","computed","sortedPosts","sort","a","b","Date","createdAt","likes","views","created","initData","checkLoginStatus","methods","handleImageUpload","event","target","files","response","get","process","env","VUE_APP_API_URL","withCredentials","user","console","fetchPosts","filterPosts","trim","filter","post","toLowerCase","includes","author","submitPost","formData","FormData","append","headers","goToBoardPage","goToWritePage","alert","goToDetailPage","postId","$router","push","name","params","id","formatDate","dateString","toLocaleDateString","undefined","year","month","day","hour","minute","resetSearch","convertNewLinesToBreaks","text","replace"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/components/BoardForm.vue"],"sourcesContent":["<template>\n  <div class=\"contents\">\n    <!-- [1] 게시글 목록(검색/정렬/작성 버튼 포함) 영역 -->\n    <section class=\"contents-header\" v-if=\"currentPage === 'board'\">\n      <div class=\"header-left\">\n        <!-- 정렬 방식 선택 -->\n        <div class=\"select-wrapper\">\n          <select id=\"sort\" v-model=\"sortOrder\" @change=\"sortPosts\" class=\"filter-dropdown\">\n            <option value=\"latest\">최신순</option>\n            <option value=\"oldest\">오래된순</option>\n            <option value=\"likes\">좋아요순</option>\n            <option value=\"views\">조회수순</option>\n          </select>\n        </div>\n\n        <!-- 검색 조건 선택 -->\n        <div class=\"select-wrapper\">\n          <select v-model=\"searchType\" class=\"filter-dropdown\">\n            <option value=\"title\">제목</option>\n            <option value=\"content\">내용</option>\n            <option value=\"author\">등록자명</option>\n          </select>\n        </div>\n\n        <!-- 검색 초기화 버튼 -->\n        <button @click=\"resetSearch\" class=\"reset-button\">초기화</button>\n      </div>\n\n      <div class=\"header-right\">\n        <!-- 검색 박스 -->\n        <div class=\"search-box\">\n          <input v-model=\"searchQuery\" @keyup.enter=\"filterPosts\" type=\"text\" placeholder=\"검색어를 입력하세요\"\n            class=\"search-input\" />\n          <span class=\"search-icon\" @click=\"filterPosts\">🔍</span>\n        </div>\n      </div>\n    </section>\n\n    <!-- 게시글 작성 이동 버튼 -->\n    <div class=\"write-button-container\" v-if=\"currentPage === 'board'\">\n      <button @click=\"goToWritePage\" class=\"write-button\">게시글 작성</button>\n    </div>\n\n    <!-- 게시글 목록 -->\n    <div v-if=\"currentPage === 'board'\" class=\"feed-container\">\n      <!-- 로딩/에러/게시글 목록 상태 표시 -->\n      <div v-if=\"loading\" class=\"loading\">로딩 중...</div>\n      <div v-else-if=\"error\" class=\"error\">게시글을 불러오는 데 실패했습니다.</div>\n\n      <div v-else-if=\"sortedPosts.length\" class=\"feed-list\">\n        <div v-for=\"post in sortedPosts\" :key=\"post._id\" class=\"feed-card\">\n          <div class=\"feed-header\">\n            <strong>{{ post.author || '작성자 없음' }}</strong>\n            <div>{{ formatDate(post.createdAt) }}</div>\n          </div>\n          <h2 class=\"feed-title\" @click=\"goToDetailPage(post._id)\">{{ post.title }}</h2>\n          <p class=\"feed-content\" v-html=\"convertNewLinesToBreaks(post.content)\"></p>\n\n          <div v-if=\"post.imageUrl\" class=\"feed-image\">\n            <img :src=\"`http://localhost:3000${post.imageUrl}`\" alt=\"게시글 이미지\" />\n          </div>\n\n          <div class=\"feed-actions\">\n            <span>👍 {{ post.likes || 0 }}</span>\n            <span style=\"margin-left: 10px;\">👎 {{ post.dislikes || 0 }}</span>\n            <span class=\"view-count\" style=\"margin-left: 10px;\">조회수: {{ post.views || 0 }}</span>\n          </div>\n        </div>\n      </div>\n\n      <div v-else class=\"no-posts\">게시글이 없습니다.</div>\n    </div>\n\n    <!-- 게시글 작성 폼 -->\n    <div v-if=\"currentPage === 'write'\" class=\"post-form\">\n      <h2 class=\"post-title\">게시글 작성</h2>\n      <form @submit.prevent=\"submitPost\">\n        <input v-model=\"title\" type=\"text\" placeholder=\"제목을 입력하세요\" class=\"post-input\" required />\n\n        <textarea v-model=\"content\" placeholder=\"내용을 입력하세요\" class=\"post-textarea\" required></textarea>\n\n        <input type=\"file\" @change=\"handleImageUpload\" accept=\"image/*\" />\n\n        <div class=\"post-buttons\">\n          <button type=\"submit\" class=\"post-submit\">게시글 작성</button>\n          <button type=\"button\" @click=\"goToBoardPage\" class=\"post-cancel\">취소</button>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      posts: [],          // 게시글 목록\n      filteredPosts: [],  // 필터링된 게시글 목록\n      loading: true,      // 로딩 상태\n      error: false,       // 오류 상태\n      title: '',          // 게시글 제목\n      content: '',        // 게시글 내용\n      currentPage: 'board',   // 현재 페이지 상태 ('board', 'write')\n      currentUser: null,      // 현재 로그인한 사용자 정보\n      sortOrder: 'latest',    // 정렬 기준\n      searchQuery: '',        // 검색어\n      searchType: 'title',    // 검색 항목 (제목, 내용, 등록자명)\n      image: null, // 추가\n    };\n  },\n  computed: {\n    // 검색된 게시글 목록을 기준으로 정렬된 게시글을 반환\n    sortedPosts() {\n      return [...this.filteredPosts].sort((a, b) => {\n        if (this.sortOrder === 'latest') {\n          return new Date(b.createdAt) - new Date(a.createdAt); // 최신순\n        } else if (this.sortOrder === 'oldest') {\n          return new Date(a.createdAt) - new Date(b.createdAt); // 오래된순\n        } else if (this.sortOrder === 'likes') {\n          return (b.likes || 0) - (a.likes || 0);               // 좋아요순\n        } else if (this.sortOrder === 'views') {\n          return (b.views || 0) - (a.views || 0);               // 조회수순\n        }\n      });\n    }\n  },\n  created() {\n    this.initData();        // 초기 데이터 로드\n    this.checkLoginStatus(); // 로그인 상태 확인\n  },\n  methods: {\n    handleImageUpload(event) {\n      this.image = event.target.files[0];\n    },\n\n    // 로그인 상태 확인\n    async checkLoginStatus() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/auth/check-login`, {\n          withCredentials: true\n        });\n        this.currentUser = response.data.user || null; // 로그인 사용자 정보\n      } catch (error) {\n        console.error('로그인 상태 확인 중 오류 발생:', error);\n        this.currentUser = null; // 로그아웃 상태\n      }\n    },\n\n    // 초기 데이터 로드\n    async initData() {\n      this.loading = true;\n      this.error = false;\n      try {\n        await this.fetchPosts();\n      } catch (error) {\n        console.error('초기 데이터를 가져오는 중 오류 발생:', error);\n        this.error = true;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // 게시글 목록 가져오기\n    async fetchPosts() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_API_URL}/api/board`, {\n          withCredentials: true\n        });\n        this.posts = response.data;\n        this.filteredPosts = [...this.posts];\n      } catch (error) {\n        console.error('게시글을 가져오는 중 오류 발생:', error);\n        this.error = true;\n      }\n    },\n\n    // 게시글 검색\n    filterPosts() {\n      if (this.searchQuery.trim()) {\n        // 제목 검색\n        if (this.searchType === 'title') {\n          this.filteredPosts = this.posts.filter(post =>\n            post.title.toLowerCase().includes(this.searchQuery.toLowerCase())\n          );\n        }\n        // 내용 검색\n        else if (this.searchType === 'content') {\n          this.filteredPosts = this.posts.filter(post =>\n            post.content.toLowerCase().includes(this.searchQuery.toLowerCase())\n          );\n        }\n        // 등록자명 검색\n        else if (this.searchType === 'author') {\n          this.filteredPosts = this.posts.filter(post =>\n            (post.author || '').toLowerCase().includes(this.searchQuery.toLowerCase())\n          );\n        }\n      } else {\n        this.filteredPosts = [...this.posts]; // 검색어 없으면 원본 전체\n      }\n    },\n\n    // 게시글 작성\n    async submitPost() {\n      const formData = new FormData();\n      formData.append('title', this.title);\n      formData.append('content', this.content);\n      if (this.image) {\n        formData.append('image', this.image);\n      }\n\n      try {\n        await axios.post(`${process.env.VUE_APP_API_URL}/api/board`, formData, {\n          withCredentials: true,\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        this.goToBoardPage();\n        this.initData();\n      } catch (error) {\n        console.error('게시글 작성 중 오류 발생:', error);\n      }\n    },\n\n    // 페이지 이동\n    goToBoardPage() {\n      this.currentPage = 'board';\n      this.title = '';\n      this.content = '';\n    },\n    goToWritePage() {\n      if (!this.currentUser) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      this.currentPage = 'write';\n    },\n    goToDetailPage(postId) {\n      this.$router.push({ name: 'BoardDetail', params: { id: postId } });\n    },\n\n    // 날짜 형식 변경\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString(undefined, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n\n    // 검색 초기화\n    resetSearch() {\n      this.searchQuery = '';\n      this.filteredPosts = [...this.posts];\n    },\n\n    // 개행 문자 -> <br> 변환\n    convertNewLinesToBreaks(text) {\n      return text.replace(/\\n/g, '<br>');\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 메인 컨테이너 */\n.contents {\n  width: 100%;\n  max-width: 1260px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px 50px;\n  border-radius: 0.5rem;\n}\n\n/* 상단 검색/필터 영역 */\n.contents-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #424242;\n  padding: 15px;\n  border-radius: 10px;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.header-right {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.filter-dropdown {\n  background-color: #333;\n  color: white;\n  padding: 8px 32px 8px 12px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  appearance: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  position: relative;\n  outline: none;\n}\n\n.select-wrapper {\n  position: relative;\n  display: inline-block;\n}\n\n.select-wrapper::after {\n  content: '▼';\n  color: gray;\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  pointer-events: none;\n}\n\n/* 검색 초기화 버튼 */\n.reset-button {\n  color: #42b983;\n  background: none;\n  padding: 8px 8px;\n  border: none;\n  border-radius: 1.5rem;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.2s, color 0.2s;\n}\n\n@media (hover: hover) {\n  .reset-button:hover {\n    background-color: hsla(160, 100%, 37%, 0.2);\n  }\n}\n\n/* 검색 박스 */\n.search-box {\n  display: flex;\n  align-items: center;\n  background-color: black;\n  border-radius: 20px;\n  padding: 5px 10px;\n}\n\n.search-input {\n  background: none;\n  border: none;\n  color: white;\n  outline: none;\n}\n\n.search-icon {\n  color: gray;\n  cursor: pointer;\n}\n\n/* 게시글 작성 버튼 컨테이너 */\n.write-button-container {\n  display: flex;\n  justify-content: center;\n  position: relative;\n}\n\n.write-button {\n  width: 100px;\n  height: 30px;\n  border-radius: 20px;\n  background-color: transparent;\n  color: white;\n  border: 1px solid #42b983;\n  cursor: pointer;\n  font-weight: bold;\n  font-size: 13px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: background-color 0.3s, transform 0.2s;\n}\n\n.write-button:hover {\n  background-color: #36a372;\n  transform: scale(1.1);\n}\n\n/* 게시글 목록 */\n.feed-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n}\n\n.feed-list {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 600px;\n  gap: 30px;\n}\n\n.feed-card {\n  background: #333;\n  border-radius: 12px;\n  padding: 15px;\n  color: white;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  transition: transform 0.2s;\n}\n\n.feed-card:hover {\n  transform: translateY(-3px);\n}\n\n.feed-header {\n  font-size: 12px;\n  color: gray;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.feed-title {\n  font-size: 18px;\n  font-weight: bold;\n  cursor: pointer;\n  margin: 0;\n}\n\n.feed-content {\n  font-size: 14px;\n  color: lightgray;\n  margin: 0;\n}\n\n.feed-actions {\n  display: flex;\n  align-items: center;\n  padding-top: 10px;\n  gap: 10px;\n}\n\n.view-count {\n  font-size: 12px;\n  color: lightgray;\n}\n\n/* 게시글 작성 폼 */\n.post-form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #333;\n  padding: 20px;\n  border-radius: 12px;\n  max-width: 500px;\n  width: 100%;\n  margin: 0 auto;\n}\n\n.post-title {\n  font-size: 20px;\n  color: white;\n}\n\n.post-input,\n.post-textarea {\n  width: 100%;\n  padding: 10px;\n  margin: 10px 0;\n  border-radius: 8px;\n  border: none;\n  background: #222;\n  color: white;\n  font-size: 14px;\n}\n\n.post-textarea {\n  min-height: 100px;\n}\n\n.post-buttons {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.post-submit,\n.post-cancel {\n  padding: 10px;\n  border-radius: 8px;\n  color: white;\n  cursor: pointer;\n  border: none;\n}\n\n.post-submit {\n  background-color: #42b983;\n}\n\n.post-cancel {\n  background-color: gray;\n}\n\n/* 에러 표시 */\n.error {\n  color: red;\n}\n\n/* 공통 버튼 여백 */\nbutton {\n  margin: 5px;\n}\n\n.feed-image {\n  position: relative;\n  width: 100%;\n  padding-top: 56.25%;\n  /* 16:9 비율을 유지 (9/16 * 100%) */\n  overflow: hidden;\n  border-radius: 8px;\n}\n\n.feed-image img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  /* 이미지 비율을 유지하며 전체 영역 채움 */\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}