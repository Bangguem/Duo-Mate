{"ast":null,"code":"export default {\n  data() {\n    return {\n      form: {\n        userid: '',\n        password: '',\n        passwordcheck: '',\n        email: '',\n        nickname: '',\n        birthdate: '',\n        gender: 'other'\n      },\n      formStep: 1,\n      duplicateCheck: {\n        message: '',\n        color: ''\n      },\n      passwordVisible: false,\n      passwordCheckVisible: false,\n      openIcon: require('@/assets/open.png'),\n      closeIcon: require('@/assets/close.png'),\n      showRiotModal: false,\n      signupSuccessModal: false\n    };\n  },\n  methods: {\n    handleStepProgress(nextStep) {\n      // 조건 만족 시 단계 증가\n      if (nextStep === 2 && this.form.userid.trim() !== '') {\n        this.formStep = Math.max(this.formStep, 2);\n      } else if (nextStep === 3 && this.form.password.length >= 8) {\n        this.formStep = Math.max(this.formStep, 3);\n      } else if (nextStep === 4 && this.form.passwordcheck.length >= 8 && this.form.password === this.form.passwordcheck) {\n        this.formStep = Math.max(this.formStep, 4);\n      } else if (nextStep === 5 && this.form.email.includes('@')) {\n        this.formStep = Math.max(this.formStep, 5);\n      }\n    },\n    handleGoToRiotLink() {\n      this.signupSuccessModal = false;\n      this.showRiotModal = true;\n    },\n    async linkRiotAccount() {\n      console.log(\"연동하기 버튼 클릭됨\"); // 디버깅 로그\n\n      if (!this.summonerName || !this.tag) {\n        alert(\"소환사 이름과 태그를 입력해주세요.\");\n        return;\n      }\n      try {\n        console.log(\"소환사 이름:\", this.summonerName);\n        console.log(\"태그:\", this.tag);\n        console.log(\"연동 요청 보냄:\", this.summonerName, this.tag); // 요청 전 콘솔 로그 추가\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/summonerInfo`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          credentials: \"include\",\n          body: JSON.stringify({\n            userid: this.form.userid,\n            summonerName: this.summonerName,\n            tag: this.tag\n          })\n        });\n        console.log(\"서버 응답 상태 코드:\", response.status); // 응답 상태 확인\n        const result = await response.json();\n        console.log(\"서버 응답 데이터:\", result); // 응답 데이터 확인\n\n        if (result.success) {\n          alert(\"라이엇 연동 완료\");\n          this.showRiotModal = false; // 모달 닫기\n          window.location.href = '/login';\n          // Riot API 데이터 업데이트\n          this.riotInfo = {\n            tier: result.tier || \"정보 없음\",\n            summonerLevel: result.summonerLevel || \"정보 없음\",\n            profileIconId: result.profileIconId || '',\n            top5Champions: result.top5Champions || []\n          };\n          this.showRiotModal = false;\n        } else {\n          alert(\"라이엇 연동 실패: \" + result.message);\n        }\n      } catch (error) {\n        console.error(\"Error linking Riot account:\", error);\n        alert(\"연동 중 오류가 발생했습니다.\");\n      }\n    },\n    togglePasswordVisibility(field) {\n      if (field === 'password') {\n        this.passwordVisible = !this.passwordVisible;\n      } else if (field === 'passwordcheck') {\n        this.passwordCheckVisible = !this.passwordCheckVisible;\n      }\n    },\n    async checkDuplicateUserId() {\n      const userid = this.form.userid;\n      if (!userid) {\n        this.duplicateCheck.message = '';\n        return;\n      }\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/check-duplicate`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include',\n          // 쿠키를 포함한 요청\n          body: JSON.stringify({\n            userid\n          })\n        });\n        const result = await response.json();\n        if (response.ok) {\n          this.duplicateCheck.message = result.message;\n          this.duplicateCheck.color = 'green';\n          this.formStep = Math.max(this.formStep, 2);\n        } else {\n          this.duplicateCheck.message = result.message;\n          this.duplicateCheck.color = 'red';\n          this.formStep = 1;\n        }\n      } catch (error) {\n        console.error('Error checking duplicate:', error);\n        this.duplicateCheck.message = '중복 확인 중 오류가 발생했습니다.';\n        this.duplicateCheck.color = 'red';\n      }\n    },\n    async handleSubmit() {\n      const {\n        userid,\n        password,\n        passwordcheck,\n        nickname,\n        email\n      } = this.form;\n      if (!userid || !password || !passwordcheck || !nickname || !email) {\n        alert('모든 항목을 입력해주세요.');\n        return;\n      }\n      if (this.form.password !== this.form.passwordcheck) {\n        alert('비밀번호가 일치하지 않습니다.');\n        return;\n      }\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/signup`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(this.form)\n        });\n        const result = await response.json();\n        if (response.ok) {\n          this.signupSuccessModal = true; // 모달 표시\n          // this.showRiotModal = true; → 이건 모달 닫을 때 띄우도록 \n        } else {\n          alert(result.message);\n        }\n      } catch (error) {\n        console.error('Signup error:', error);\n        alert('회원가입 중 오류가 발생했습니다.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","form","userid","password","passwordcheck","email","nickname","birthdate","gender","formStep","duplicateCheck","message","color","passwordVisible","passwordCheckVisible","openIcon","require","closeIcon","showRiotModal","signupSuccessModal","methods","handleStepProgress","nextStep","trim","Math","max","length","includes","handleGoToRiotLink","linkRiotAccount","console","log","summonerName","tag","alert","response","fetch","process","env","VUE_APP_API_URL","method","headers","credentials","body","JSON","stringify","status","result","json","success","window","location","href","riotInfo","tier","summonerLevel","profileIconId","top5Champions","error","togglePasswordVisibility","field","checkDuplicateUserId","ok","handleSubmit"],"sources":["/Users/bangguem/Desktop/머지/Duo-Mate/src/components/SignupForm.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"signup-container\">\n      <header class=\"header\">\n        <div class=\"logo\">\n          <div class=\"circle\">\n            <img src=\"/favicon.ico\" class=\"circle\" @click=\"$router.push('/')\" style=\"cursor: pointer;\" alt=\"\" />\n          </div>\n          <span>회원가입</span>\n        </div>\n        <nav class=\"nav-links\">\n          <div class=\"nav-button\" @click=\"$router.push('/')\">홈</div>\n          <div class=\"nav-button\" @click=\"$router.push('/login')\">로그인</div>\n          <div class=\"nav-button\" @click=\"$router.push('/patch-notes')\">패치 노트</div>\n        </nav>\n      </header>\n      <main>\n        <div class=\"form-container\">\n          <h2>계정 생성</h2>\n          <p>계정 생성에 필요한 정보를 입력해주세요. </p>\n          <form @submit.prevent=\"handleSubmit\">\n            <transition name=\"fade-slide\">\n              <div class=\"form-group\" v-if=\"formStep >= 1\">\n                <label for=\"userid\">아이디</label>\n                <div class=\"input-with-icon\">\n                  <input id=\"userid\" type=\"text\" placeholder=\"아이디를 입력해주세요\" v-model=\"form.userid\"\n                    @input=\"checkDuplicateUserId\" required />\n                  <span v-if=\"duplicateCheck.color === 'green'\" class=\"check-icon\">✅</span>\n                </div>\n                <div :style=\"{ color: duplicateCheck.color, display: 'flex', gap: '6px', fontSize: '14px' }\">{{\n                  duplicateCheck.message }}</div>\n              </div>\n            </transition>\n            <transition name=\"fade-slide\">\n              <div class=\"form-group password-field\" v-if=\"formStep >= 2\">\n                <label for=\"password\">비밀번호</label>\n                <div class=\"password-container\">\n                  <input id=\"password\" :type=\"passwordVisible ? 'text' : 'password'\" placeholder=\"비밀번호를 입력해주세요\"\n                    v-model=\"form.password\" @input=\"handleStepProgress(3)\" minlength=\"8\" required />\n                  <img :src=\"passwordVisible ? openIcon : closeIcon\" alt=\"Show Password\" class=\"toggle-password\"\n                    @click=\"togglePasswordVisibility('password')\" />\n                </div>\n                <div v-if=\"form.password.length > 0 && form.password.length < 8\" class=\"error-message\">\n                  비밀번호는 최소 8자리 이상이어야 합니다.\n                </div>\n              </div>\n            </transition>\n            <transition name=\"fade-slide\">\n              <div class=\"form-group password-field\" v-if=\"formStep >= 3\">\n                <label for=\"passwordcheck\">비밀번호 확인</label>\n                <div class=\"password-container\">\n                  <input id=\"passwordcheck\" :type=\"passwordCheckVisible ? 'text' : 'password'\"\n                    placeholder=\"비밀번호를 다시 입력해주세요\" v-model=\"form.passwordcheck\" @input=\"handleStepProgress(4)\"\n                    minlength=\"8\" required />\n                  <img :src=\"passwordCheckVisible ? openIcon : closeIcon\" alt=\"Show Password\" class=\"toggle-password\"\n                    @click=\"togglePasswordVisibility('passwordcheck')\" />\n                </div>\n                <div v-if=\"form.passwordcheck && form.password.length >= 8\">\n                  <div v-if=\"form.password !== form.passwordcheck\" class=\"error-message\">\n                    비밀번호가 일치하지 않습니다.\n                  </div>\n                  <div v-else class=\"correct-message\">\n                    비밀번호가 일치합니다.\n                  </div>\n                </div>\n              </div>\n            </transition>\n            <transition name=\"fade-slide\">\n              <div class=\"form-group\" v-if=\"formStep >= 4\">\n                <label for=\"email\">이메일</label>\n                <input id=\"email\" type=\"email\" v-model=\"form.email\" @input=\"handleStepProgress(5)\"\n                  placeholder=\"이메일을 입력해주세요(비밀번호 또는 아이디 찾기에 사용)\" />\n              </div>\n            </transition>\n            <transition name=\"fade-slide\">\n              <div class=\"form-group\" v-if=\"formStep >= 5\">\n                <label for=\"nickname\">닉네임</label>\n                <input id=\"nickname\" type=\"text\" placeholder=\"닉네임을 입력해주세요\" v-model=\"form.nickname\" required />\n              </div>\n            </transition>\n            <transition name=\"fade-slide\">\n              <div class=\"button-group\" v-if=\"formStep >= 5\">\n                <button type=\"button\" class=\"cancel-button\">Cancel</button>\n                <button type=\"submit\" class=\"signup-button\">Sign Up</button>\n              </div>\n            </transition>\n          </form>\n        </div>\n      </main>\n      <div v-if=\"signupSuccessModal\" class=\"sign-modal\">\n        <div class=\"sign-modal-content\">\n          <h2>회원가입 완료!</h2>\n          <p>라이엇 계정 연동을 진행해주세요.</p>\n          <br />\n          <button @click=\"handleGoToRiotLink\">연동하러 가기</button>\n        </div>\n      </div>\n      <div v-if=\"showRiotModal == true\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h2>Riot 연동</h2>\n          <p>회원가입이 완료되었습니다! 라이엇 계정을 연동해주세요.</p>\n          <label for=\"summoner\">소환사 이름</label>\n          <input type=\"text\" v-model=\"summonerName\" placeholder=\"소환사 이름 입력\" />\n          <label for=\"tag\">태그</label>\n          <input type=\"text\" v-model=\"tag\" placeholder=\"태그 입력 (예: KR1)\" />\n          <button type=\"button\" @click=\"linkRiotAccount\">연동하기</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nexport default {\n  data() {\n    return {\n      form: {\n        userid: '',\n        password: '',\n        passwordcheck: '',\n        email: '',\n        nickname: '',\n        birthdate: '',\n        gender: 'other',\n      },\n      formStep: 1,\n      duplicateCheck: {\n        message: '',\n        color: '',\n      },\n      passwordVisible: false,\n      passwordCheckVisible: false,\n      openIcon: require('@/assets/open.png'),\n      closeIcon: require('@/assets/close.png'),\n      showRiotModal: false,\n      signupSuccessModal: false,\n    };\n  },\n  methods: {\n    handleStepProgress(nextStep) {\n      // 조건 만족 시 단계 증가\n      if (nextStep === 2 && this.form.userid.trim() !== '') {\n        this.formStep = Math.max(this.formStep, 2);\n      } else if (nextStep === 3 && this.form.password.length >= 8) {\n        this.formStep = Math.max(this.formStep, 3);\n      } else if (nextStep === 4 && this.form.passwordcheck.length >= 8 && this.form.password === this.form.passwordcheck) {\n        this.formStep = Math.max(this.formStep, 4);\n      } else if (nextStep === 5 && this.form.email.includes('@')) {\n        this.formStep = Math.max(this.formStep, 5);\n      }\n    },\n    handleGoToRiotLink() {\n      this.signupSuccessModal = false;\n      this.showRiotModal = true;\n    },\n\n    async linkRiotAccount() {\n      console.log(\"연동하기 버튼 클릭됨\"); // 디버깅 로그\n\n      if (!this.summonerName || !this.tag) {\n        alert(\"소환사 이름과 태그를 입력해주세요.\");\n        return;\n      }\n\n      try {\n\n        console.log(\"소환사 이름:\", this.summonerName);\n        console.log(\"태그:\", this.tag);\n\n        console.log(\"연동 요청 보냄:\", this.summonerName, this.tag);  // 요청 전 콘솔 로그 추가\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/summonerInfo`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n          body: JSON.stringify({\n            userid: this.form.userid,\n            summonerName: this.summonerName,\n            tag: this.tag,\n          }),\n        });\n        console.log(\"서버 응답 상태 코드:\", response.status); // 응답 상태 확인\n        const result = await response.json();\n        console.log(\"서버 응답 데이터:\", result); // 응답 데이터 확인\n\n        if (result.success) {\n          alert(\"라이엇 연동 완료\");\n          this.showRiotModal = false; // 모달 닫기\n          window.location.href = '/login';\n          // Riot API 데이터 업데이트\n          this.riotInfo = {\n            tier: result.tier || \"정보 없음\",\n            summonerLevel: result.summonerLevel || \"정보 없음\",\n            profileIconId: result.profileIconId || '',\n            top5Champions: result.top5Champions || [],\n          };\n\n          this.showRiotModal = false;\n        } else {\n          alert(\"라이엇 연동 실패: \" + result.message);\n        }\n      } catch (error) {\n        console.error(\"Error linking Riot account:\", error);\n        alert(\"연동 중 오류가 발생했습니다.\");\n      }\n    },\n    togglePasswordVisibility(field) {\n      if (field === 'password') {\n        this.passwordVisible = !this.passwordVisible;\n      } else if (field === 'passwordcheck') {\n        this.passwordCheckVisible = !this.passwordCheckVisible;\n      }\n    },\n    async checkDuplicateUserId() {\n      const userid = this.form.userid;\n\n      if (!userid) {\n        this.duplicateCheck.message = '';\n        return;\n      }\n\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/check-duplicate`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include', // 쿠키를 포함한 요청\n          body: JSON.stringify({ userid }),\n        });\n\n        const result = await response.json();\n        if (response.ok) {\n          this.duplicateCheck.message = result.message;\n          this.duplicateCheck.color = 'green';\n          this.formStep = Math.max(this.formStep, 2);\n        } else {\n          this.duplicateCheck.message = result.message;\n          this.duplicateCheck.color = 'red';\n          this.formStep = 1;\n        }\n      } catch (error) {\n        console.error('Error checking duplicate:', error);\n        this.duplicateCheck.message = '중복 확인 중 오류가 발생했습니다.';\n        this.duplicateCheck.color = 'red';\n      }\n    },\n    async handleSubmit() {\n      const { userid, password, passwordcheck, nickname, email } = this.form;\n\n      if (!userid || !password || !passwordcheck || !nickname || !email) {\n        alert('모든 항목을 입력해주세요.');\n        return;\n      }\n      if (this.form.password !== this.form.passwordcheck) {\n        alert('비밀번호가 일치하지 않습니다.');\n        return;\n      }\n\n      try {\n        const response = await fetch(`${process.env.VUE_APP_API_URL}/signup`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(this.form),\n        });\n\n        const result = await response.json();\n        if (response.ok) {\n          this.signupSuccessModal = true; // 모달 표시\n          // this.showRiotModal = true; → 이건 모달 닫을 때 띄우도록 \n        } else {\n          alert(result.message);\n        }\n      } catch (error) {\n        console.error('Signup error:', error);\n        alert('회원가입 중 오류가 발생했습니다.');\n      }\n    },\n\n  },\n\n};\n</script>\n\n<style scoped>\n/* 전체 스타일 초기화 */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  height: 100%;\n}\n\nbody {\n  margin: 0;\n  font-family: Arial, sans-serif;\n  background-color: #212121;\n}\n\n#app {\n  width: 120%;\n  height: 120%;\n  background-color: #212121;\n}\n\n/* 전체 레이아웃 스타일 */\n.signup-container {\n  font-family: Arial, sans-serif;\n  background-color: #212121;\n  color: #FAFAFA;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: start;\n}\n\n/* 헤더 스타일 */\n.header {\n  width: 100%;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #424242;\n  height: 50px;\n}\n\n.header h1 {\n  margin: 0;\n  font-size: 16px;\n}\n\n.nav-links {\n  display: flex;\n  gap: 4px;\n  align-items: stretch;\n}\n\n.nav-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50px;\n  width: 80px;\n  padding: 0 16px;\n  background-color: transparent;\n  color: #FAFAFA;\n  border-radius: 0;\n  font-size: 12px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.nav-button:hover {\n  background-color: #212121;\n}\n\n.header nav a {\n  color: #FAFAFA;\n  text-decoration: none;\n  margin-left: 15px;\n  font-size: 10px;\n}\n\n.logo {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.circle {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: #15513775;\n}\n\n/* 폼 컨테이너 */\n.form-container {\n  background-color: #212121;\n  padding: 20px 20px;\n  border-radius: 8px;\n  max-width: 400px;\n  width: 200vw;\n}\n\n.form-container h2 {\n  font-size: 24px;\n  margin-bottom: 10px;\n}\n\n.form-container p {\n  font-size: 14px;\n  margin-bottom: 20px;\n}\n\n/* 폼 그룹 스타일 */\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group label {\n  display: block;\n  font-size: 14px;\n  margin-bottom: 5px;\n}\n\n.form-group input {\n  width: 100%;\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  background-color: #FAFAFA;\n  color: black;\n}\n\n.form-group select {\n  width: 100%;\n  height: 40px;\n  padding: 10px;\n  background-color: #FAFAFA;\n  border-radius: 4px;\n  font-size: 14px;\n  color: #424242;\n  border: none;\n  cursor: pointer;\n}\n\n/* 버튼 스타일 */\n.button-group {\n  display: flex;\n  gap: 10px;\n  margin-left: 8px;\n}\n\n.cancel-button,\n.signup-button {\n  padding: 10px 60px;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  cursor: pointer;\n}\n\n.cancel-button {\n  background-color: #424242;\n  color: #FAFAFA;\n}\n\n.signup-button {\n  background-color: #15513775;\n  color: #FAFAFA;\n}\n\n.cancel-button:hover {\n  background-color: #727272;\n}\n\n.signup-button:hover {\n  background-color: #15513775;\n}\n\n.password-container {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n/* 비밀번호 입력칸 */\n.password-container input {\n  width: 100%;\n  padding-right: 40px;\n  /* 아이콘이 들어갈 공간 확보 */\n}\n\n/* 눈 모양 아이콘 */\n.toggle-password {\n  position: absolute;\n  right: 10px;\n  width: 24px;\n  /* 추천 사이즈 */\n  height: 24px;\n  cursor: pointer;\n  opacity: 0.8;\n  transition: opacity 0.2s;\n}\n\n.toggle-password:hover {\n  opacity: 1;\n}\n\n.riot-connect {\n  display: flex;\n  flex-direction: column;\n}\n\n.riot-inputs {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n}\n\n.riot-inputs input {\n  width: 50%;\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  background-color: #FAFAFA;\n  color: black;\n}\n\n.riot-inputs span {\n  font-size: 18px;\n  color: #FAFAFA;\n}\n\n.form-group button {\n  margin-top: 10px;\n  padding: 8px;\n  border: none;\n  cursor: pointer;\n  background-color: #15513775;\n  color: #FAFAFA;\n  border-radius: 5px;\n}\n\n.error-message {\n  gap: 10px;\n  color: red;\n  font-size: 12px;\n  margin-top: 5px;\n}\n\n.correct-message {\n  gap: 10px;\n  color: green;\n  font-size: 12px;\n  margin-top: 5px;\n}\n\n/* Riot 연동 모달 스타일 */\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: #212121;\n  padding: 20px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  z-index: 1000;\n  border-radius: 10px;\n  color: #FAFAFA;\n  width: 400px;\n  height: 270px;\n}\n\n.modal-content {\n  display: flex;\n  flex-direction: column;\n}\n\n.modal-content h2 {\n  margin-bottom: 10px;\n}\n\n.modal-content input {\n  margin: 5px 0;\n  padding: 8px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.modal-content button {\n  margin-top: 10px;\n  padding: 8px;\n  border: none;\n  cursor: pointer;\n  background-color: #0064006d;\n  color: #FAFAFA;\n  border-radius: 5px;\n}\n\n.sign-modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: #212121;\n  padding: 20px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  z-index: 1000;\n  border-radius: 10px;\n  color: #FAFAFA;\n  width: 400px;\n  height: 150px;\n}\n\n.sign-modal-content {\n  display: flex;\n  flex-direction: column;\n}\n\n.sign-modal-content h2 {\n  margin-bottom: 10px;\n}\n\n.sign-modal-content button {\n  margin-top: 10px;\n  padding: 8px;\n  border: none;\n  cursor: pointer;\n  background-color: #0064006d;\n  color: #FAFAFA;\n  border-radius: 5px;\n}\n\n.fade-slide-enter-active,\n.fade-slide-leave-active {\n  transition: all 1.5s ease;\n}\n\n.fade-slide-enter-from,\n.fade-slide-leave-to {\n  opacity: 0;\n  transform: translateY(-10px);\n  /* 여기! 위에서 아래로 */\n}\n\n.fade-slide-enter-to,\n.fade-slide-leave-from {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n.input-with-icon {\n  position: relative;\n}\n\n.check-icon {\n  position: absolute;\n  right: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}